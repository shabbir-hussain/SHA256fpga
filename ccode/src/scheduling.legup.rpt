//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Nov 19 11:17:59 2015
//----------------------------------------------------------------------------//

Target Family: CycloneIV
Clock period constraint: 1.000000e+02ns
Start Function: pad
state: LEGUP_0
   br label %1
   Transition: if (start): LEGUP_F_pad_BB__1_1 default: LEGUP_0
state: LEGUP_F_pad_BB__1_1
   %indvar1 = phi i64 [ %indvar.next2, %3 ], [ 0, %0 ] (endState: LEGUP_F_pad_BB__1_1)
   %2 = phi i32 [ %7, %3 ], [ 0, %0 ] (endState: LEGUP_F_pad_BB__1_1)
   %exitcond = icmp eq i64 %indvar1, %msgLen (endState: LEGUP_F_pad_BB__1_1)
   br i1 %exitcond, label %8, label %3
   Transition: if (%exitcond): LEGUP_F_pad_BB__8_6 default: LEGUP_F_pad_BB__3_2
state: LEGUP_F_pad_BB__3_2
   %4 = getelementptr inbounds i8* %msg, i32 %2 (endState: LEGUP_F_pad_BB__3_2)
   %5 = load i8* %4, align 1 (endState: LEGUP_F_pad_BB__3_4)
   %6 = getelementptr inbounds i8* %data, i32 %2 (endState: LEGUP_F_pad_BB__3_2)
   %7 = add nsw i32 %2, 1 (endState: LEGUP_F_pad_BB__3_2)
   %indvar.next2 = add i64 %indvar1, 1 (endState: LEGUP_F_pad_BB__3_2)
   Transition: default: LEGUP_F_pad_BB__3_3
state: LEGUP_F_pad_BB__3_3
   Transition: default: LEGUP_F_pad_BB__3_4
state: LEGUP_F_pad_BB__3_4
   store i8 %5, i8* %6, align 1 (endState: LEGUP_F_pad_BB__3_5)
   Transition: default: LEGUP_F_pad_BB__3_5
state: LEGUP_F_pad_BB__3_5
   br label %1
   Transition: default: LEGUP_F_pad_BB__1_1
state: LEGUP_F_pad_BB__8_6
   %9 = trunc i64 %msgLen to i32 (endState: LEGUP_F_pad_BB__8_6)
   %10 = getelementptr inbounds i8* %data, i32 %9 (endState: LEGUP_F_pad_BB__8_6)
   store i8 -128, i8* %10, align 1 (endState: LEGUP_F_pad_BB__8_7)
   %11 = add i32 %9, 1 (endState: LEGUP_F_pad_BB__8_6)
   Transition: default: LEGUP_F_pad_BB__8_7
state: LEGUP_F_pad_BB__8_7
   br label %12
   Transition: default: LEGUP_F_pad_BB__12_8
state: LEGUP_F_pad_BB__12_8
   %indvar = phi i32 [ %indvar.next, %15 ], [ 0, %8 ] (endState: LEGUP_F_pad_BB__12_8)
   %i.1.in = add i32 %9, %indvar (endState: LEGUP_F_pad_BB__12_8)
   %i.1 = add i32 %11, %indvar (endState: LEGUP_F_pad_BB__12_8)
   %13 = and i32 %i.1, 63 (endState: LEGUP_F_pad_BB__12_8)
   %14 = icmp eq i32 %13, 0 (endState: LEGUP_F_pad_BB__12_8)
   br i1 %14, label %16, label %15
   Transition: if (%14): LEGUP_F_pad_BB__16_11 default: LEGUP_F_pad_BB__15_9
state: LEGUP_F_pad_BB__15_9
   %scevgep = getelementptr i8* %data, i32 %i.1 (endState: LEGUP_F_pad_BB__15_9)
   store i8 0, i8* %scevgep, align 1 (endState: LEGUP_F_pad_BB__15_10)
   %indvar.next = add i32 %indvar, 1 (endState: LEGUP_F_pad_BB__15_9)
   Transition: default: LEGUP_F_pad_BB__15_10
state: LEGUP_F_pad_BB__15_10
   br label %12
   Transition: default: LEGUP_F_pad_BB__12_8
state: LEGUP_F_pad_BB__16_11
   %17 = shl i64 %msgLen, 3 (endState: LEGUP_F_pad_BB__16_11)
   %18 = add nsw i32 %i.1.in, -1 (endState: LEGUP_F_pad_BB__16_11)
   %20 = trunc i64 %17 to i8 (endState: LEGUP_F_pad_BB__16_11)
   %21 = getelementptr inbounds i8* %data, i32 %i.1.in (endState: LEGUP_F_pad_BB__16_11)
   store i8 %20, i8* %21, align 1 (endState: LEGUP_F_pad_BB__16_12)
   %22 = sdiv i32 %i.1, 64 (endState: LEGUP_F_pad_BB__16_43)
   Transition: default: LEGUP_F_pad_BB__16_12
state: LEGUP_F_pad_BB__16_12
   %19 = getelementptr inbounds i8* %data, i32 %18 (endState: LEGUP_F_pad_BB__16_12)
   store i8 0, i8* %19, align 1 (endState: LEGUP_F_pad_BB__16_13)
   Transition: default: LEGUP_F_pad_BB__16_13
state: LEGUP_F_pad_BB__16_13
   Transition: default: LEGUP_F_pad_BB__16_14
state: LEGUP_F_pad_BB__16_14
   Transition: default: LEGUP_F_pad_BB__16_15
state: LEGUP_F_pad_BB__16_15
   Transition: default: LEGUP_F_pad_BB__16_16
state: LEGUP_F_pad_BB__16_16
   Transition: default: LEGUP_F_pad_BB__16_17
state: LEGUP_F_pad_BB__16_17
   Transition: default: LEGUP_F_pad_BB__16_18
state: LEGUP_F_pad_BB__16_18
   Transition: default: LEGUP_F_pad_BB__16_19
state: LEGUP_F_pad_BB__16_19
   Transition: default: LEGUP_F_pad_BB__16_20
state: LEGUP_F_pad_BB__16_20
   Transition: default: LEGUP_F_pad_BB__16_21
state: LEGUP_F_pad_BB__16_21
   Transition: default: LEGUP_F_pad_BB__16_22
state: LEGUP_F_pad_BB__16_22
   Transition: default: LEGUP_F_pad_BB__16_23
state: LEGUP_F_pad_BB__16_23
   Transition: default: LEGUP_F_pad_BB__16_24
state: LEGUP_F_pad_BB__16_24
   Transition: default: LEGUP_F_pad_BB__16_25
state: LEGUP_F_pad_BB__16_25
   Transition: default: LEGUP_F_pad_BB__16_26
state: LEGUP_F_pad_BB__16_26
   Transition: default: LEGUP_F_pad_BB__16_27
state: LEGUP_F_pad_BB__16_27
   Transition: default: LEGUP_F_pad_BB__16_28
state: LEGUP_F_pad_BB__16_28
   Transition: default: LEGUP_F_pad_BB__16_29
state: LEGUP_F_pad_BB__16_29
   Transition: default: LEGUP_F_pad_BB__16_30
state: LEGUP_F_pad_BB__16_30
   Transition: default: LEGUP_F_pad_BB__16_31
state: LEGUP_F_pad_BB__16_31
   Transition: default: LEGUP_F_pad_BB__16_32
state: LEGUP_F_pad_BB__16_32
   Transition: default: LEGUP_F_pad_BB__16_33
state: LEGUP_F_pad_BB__16_33
   Transition: default: LEGUP_F_pad_BB__16_34
state: LEGUP_F_pad_BB__16_34
   Transition: default: LEGUP_F_pad_BB__16_35
state: LEGUP_F_pad_BB__16_35
   Transition: default: LEGUP_F_pad_BB__16_36
state: LEGUP_F_pad_BB__16_36
   Transition: default: LEGUP_F_pad_BB__16_37
state: LEGUP_F_pad_BB__16_37
   Transition: default: LEGUP_F_pad_BB__16_38
state: LEGUP_F_pad_BB__16_38
   Transition: default: LEGUP_F_pad_BB__16_39
state: LEGUP_F_pad_BB__16_39
   Transition: default: LEGUP_F_pad_BB__16_40
state: LEGUP_F_pad_BB__16_40
   Transition: default: LEGUP_F_pad_BB__16_41
state: LEGUP_F_pad_BB__16_41
   Transition: default: LEGUP_F_pad_BB__16_42
state: LEGUP_F_pad_BB__16_42
   Transition: default: LEGUP_F_pad_BB__16_43
state: LEGUP_F_pad_BB__16_43
   ret i32 %22
   Transition: default: LEGUP_0

Basic Block: %3 Num States: 4
Basic Block: %8 Num States: 2
Basic Block: %12 Num States: 1
Basic Block: %15 Num States: 2
Basic Block: %16 Num States: 33
Basic Block: %0 Num States: 1
Basic Block: %1 Num States: 1
End Function: pad
--------------------------------------------------------------------------------

Target Family: CycloneIV
Clock period constraint: 1.000000e+02ns
Start Function: outerloop
state: LEGUP_0
   Transition: if (start): LEGUP_F_outerloop_BB__0_1 default: LEGUP_0
state: LEGUP_F_outerloop_BB__0_1
   %W = alloca [64 x i32], align 4 (endState: LEGUP_F_outerloop_BB__0_1)
   %1 = icmp sgt i32 %numBlocks, 0 (endState: LEGUP_F_outerloop_BB__0_1)
   %smax = select i1 %1, i32 %numBlocks, i32 0 (endState: LEGUP_F_outerloop_BB__0_1)
   br label %2
   Transition: default: LEGUP_F_outerloop_BB__2_2
state: LEGUP_F_outerloop_BB__2_2
   %h7.0 = phi i32 [ 1541459225, %0 ], [ %116, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %h6.0 = phi i32 [ 528734635, %0 ], [ %117, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %h5.0 = phi i32 [ -1694144372, %0 ], [ %118, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %h4.0 = phi i32 [ 1359893119, %0 ], [ %119, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %h3.0 = phi i32 [ -1521486534, %0 ], [ %120, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %h2.0 = phi i32 [ 1013904242, %0 ], [ %121, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %h1.0 = phi i32 [ -1150833019, %0 ], [ %122, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %h0.0 = phi i32 [ 1779033703, %0 ], [ %123, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %3 = phi i32 [ 0, %0 ], [ %124, %115 ] (endState: LEGUP_F_outerloop_BB__2_2)
   %4 = shl i32 %3, 6 (endState: LEGUP_F_outerloop_BB__2_2)
   %5 = or i32 %4, 1 (endState: LEGUP_F_outerloop_BB__2_2)
   %6 = or i32 %4, 2 (endState: LEGUP_F_outerloop_BB__2_2)
   %7 = or i32 %4, 3 (endState: LEGUP_F_outerloop_BB__2_2)
   %exitcond14 = icmp eq i32 %3, %smax (endState: LEGUP_F_outerloop_BB__2_2)
   br i1 %exitcond14, label %125, label %8
   Transition: if (%exitcond14): LEGUP_F_outerloop_BB__125_30 default: LEGUP_F_outerloop_BB__8_3
state: LEGUP_F_outerloop_BB__8_3
   br label %9
   Transition: default: LEGUP_F_outerloop_BB__9_4
state: LEGUP_F_outerloop_BB__9_4
   %10 = phi i32 [ 0, %8 ], [ %33, %32 ] (endState: LEGUP_F_outerloop_BB__9_4)
   %11 = shl i32 %10, 2 (endState: LEGUP_F_outerloop_BB__9_4)
   %exitcond = icmp eq i32 %10, 16 (endState: LEGUP_F_outerloop_BB__9_4)
   br i1 %exitcond, label %34, label %12
   Transition: if (%exitcond): LEGUP_F_outerloop_BB__34_12 default: LEGUP_F_outerloop_BB__12_5
state: LEGUP_F_outerloop_BB__12_5
   %scevgep = getelementptr [64 x i32]* %W, i32 0, i32 %10 (endState: LEGUP_F_outerloop_BB__12_5)
   %13 = add i32 %7, %11 (endState: LEGUP_F_outerloop_BB__12_5)
   %14 = add i32 %6, %11 (endState: LEGUP_F_outerloop_BB__12_5)
   %15 = add i32 %5, %11 (endState: LEGUP_F_outerloop_BB__12_5)
   %16 = add i32 %4, %11 (endState: LEGUP_F_outerloop_BB__12_5)
   Transition: default: LEGUP_F_outerloop_BB__12_6
state: LEGUP_F_outerloop_BB__12_6
   %scevgep1 = getelementptr i8* %data, i32 %13 (endState: LEGUP_F_outerloop_BB__12_6)
   %scevgep2 = getelementptr i8* %data, i32 %14 (endState: LEGUP_F_outerloop_BB__12_6)
   %scevgep3 = getelementptr i8* %data, i32 %15 (endState: LEGUP_F_outerloop_BB__12_6)
   %scevgep4 = getelementptr i8* %data, i32 %16 (endState: LEGUP_F_outerloop_BB__12_6)
   %17 = load i8* %scevgep4, align 1 (endState: LEGUP_F_outerloop_BB__12_8)
   %20 = load i8* %scevgep3, align 1 (endState: LEGUP_F_outerloop_BB__12_8)
   Transition: default: LEGUP_F_outerloop_BB__12_7
state: LEGUP_F_outerloop_BB__12_7
   %24 = load i8* %scevgep2, align 1 (endState: LEGUP_F_outerloop_BB__12_9)
   %28 = load i8* %scevgep1, align 1 (endState: LEGUP_F_outerloop_BB__12_9)
   Transition: default: LEGUP_F_outerloop_BB__12_8
state: LEGUP_F_outerloop_BB__12_8
   %18 = zext i8 %17 to i32 (endState: LEGUP_F_outerloop_BB__12_8)
   %19 = shl nuw i32 %18, 24 (endState: LEGUP_F_outerloop_BB__12_8)
   %21 = zext i8 %20 to i32 (endState: LEGUP_F_outerloop_BB__12_8)
   %22 = shl nuw nsw i32 %21, 16 (endState: LEGUP_F_outerloop_BB__12_8)
   %23 = or i32 %19, %22 (endState: LEGUP_F_outerloop_BB__12_8)
   Transition: default: LEGUP_F_outerloop_BB__12_9
state: LEGUP_F_outerloop_BB__12_9
   %25 = zext i8 %24 to i32 (endState: LEGUP_F_outerloop_BB__12_9)
   %26 = shl nuw nsw i32 %25, 8 (endState: LEGUP_F_outerloop_BB__12_9)
   %27 = or i32 %23, %26 (endState: LEGUP_F_outerloop_BB__12_9)
   %29 = zext i8 %28 to i32 (endState: LEGUP_F_outerloop_BB__12_9)
   %30 = or i32 %27, %29 (endState: LEGUP_F_outerloop_BB__12_9)
   store i32 %30, i32* %scevgep, align 4 (endState: LEGUP_F_outerloop_BB__12_10)
   Transition: default: LEGUP_F_outerloop_BB__12_10
state: LEGUP_F_outerloop_BB__12_10
   %31 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0), i32 %30) #3 (endState: LEGUP_F_outerloop_BB__12_10)
   br label %32
   Transition: default: LEGUP_F_outerloop_BB__32_11
state: LEGUP_F_outerloop_BB__32_11
   %33 = add nsw i32 %10, 1 (endState: LEGUP_F_outerloop_BB__32_11)
   br label %9
   Transition: default: LEGUP_F_outerloop_BB__9_4
state: LEGUP_F_outerloop_BB__34_12
   br label %35
   Transition: default: LEGUP_F_outerloop_BB__35_13
state: LEGUP_F_outerloop_BB__35_13
   %indvar = phi i32 [ %indvar.next, %68 ], [ 0, %34 ] (endState: LEGUP_F_outerloop_BB__35_13)
   %36 = add i32 %indvar, 1 (endState: LEGUP_F_outerloop_BB__35_13)
   %37 = add i32 %indvar, 14 (endState: LEGUP_F_outerloop_BB__35_13)
   %exitcond5 = icmp eq i32 %indvar, 48 (endState: LEGUP_F_outerloop_BB__35_13)
   Transition: default: LEGUP_F_outerloop_BB__35_14
state: LEGUP_F_outerloop_BB__35_14
   %scevgep8 = getelementptr [64 x i32]* %W, i32 0, i32 %36 (endState: LEGUP_F_outerloop_BB__35_14)
   %scevgep10 = getelementptr [64 x i32]* %W, i32 0, i32 %37 (endState: LEGUP_F_outerloop_BB__35_14)
   br i1 %exitcond5, label %69, label %38
   Transition: if (%exitcond5): LEGUP_F_outerloop_BB__69_22 default: LEGUP_F_outerloop_BB__38_15
state: LEGUP_F_outerloop_BB__38_15
   %39 = add i32 %indvar, 9 (endState: LEGUP_F_outerloop_BB__38_15)
   %scevgep7 = getelementptr [64 x i32]* %W, i32 0, i32 %indvar (endState: LEGUP_F_outerloop_BB__38_15)
   %t.1 = add i32 %indvar, 16 (endState: LEGUP_F_outerloop_BB__38_15)
   %40 = load i32* %scevgep10, align 4 (endState: LEGUP_F_outerloop_BB__38_17)
   %48 = load i32* %scevgep10, align 4 (endState: LEGUP_F_outerloop_BB__38_17)
   Transition: default: LEGUP_F_outerloop_BB__38_16
state: LEGUP_F_outerloop_BB__38_16
   %scevgep9 = getelementptr [64 x i32]* %W, i32 0, i32 %39 (endState: LEGUP_F_outerloop_BB__38_16)
   %scevgep6 = getelementptr [64 x i32]* %W, i32 0, i32 %t.1 (endState: LEGUP_F_outerloop_BB__38_16)
   %53 = load i32* %scevgep8, align 4 (endState: LEGUP_F_outerloop_BB__38_18)
   %61 = load i32* %scevgep8, align 4 (endState: LEGUP_F_outerloop_BB__38_18)
   Transition: default: LEGUP_F_outerloop_BB__38_17
state: LEGUP_F_outerloop_BB__38_17
   %41 = lshr i32 %40, 17 (endState: LEGUP_F_outerloop_BB__38_17)
   %42 = shl i32 %40, 15 (endState: LEGUP_F_outerloop_BB__38_17)
   %43 = or i32 %41, %42 (endState: LEGUP_F_outerloop_BB__38_17)
   %44 = lshr i32 %40, 19 (endState: LEGUP_F_outerloop_BB__38_17)
   %45 = shl i32 %40, 13 (endState: LEGUP_F_outerloop_BB__38_17)
   %46 = or i32 %44, %45 (endState: LEGUP_F_outerloop_BB__38_17)
   %47 = xor i32 %43, %46 (endState: LEGUP_F_outerloop_BB__38_17)
   %49 = lshr i32 %48, 10 (endState: LEGUP_F_outerloop_BB__38_17)
   %50 = xor i32 %47, %49 (endState: LEGUP_F_outerloop_BB__38_17)
   %51 = load i32* %scevgep9, align 4 (endState: LEGUP_F_outerloop_BB__38_19)
   %65 = load i32* %scevgep7, align 4 (endState: LEGUP_F_outerloop_BB__38_19)
   Transition: default: LEGUP_F_outerloop_BB__38_18
state: LEGUP_F_outerloop_BB__38_18
   %54 = lshr i32 %53, 7 (endState: LEGUP_F_outerloop_BB__38_18)
   %55 = shl i32 %53, 25 (endState: LEGUP_F_outerloop_BB__38_18)
   %56 = or i32 %54, %55 (endState: LEGUP_F_outerloop_BB__38_18)
   %57 = lshr i32 %53, 18 (endState: LEGUP_F_outerloop_BB__38_18)
   %58 = shl i32 %53, 14 (endState: LEGUP_F_outerloop_BB__38_18)
   %59 = or i32 %57, %58 (endState: LEGUP_F_outerloop_BB__38_18)
   %60 = xor i32 %56, %59 (endState: LEGUP_F_outerloop_BB__38_18)
   %62 = lshr i32 %61, 3 (endState: LEGUP_F_outerloop_BB__38_18)
   %63 = xor i32 %60, %62 (endState: LEGUP_F_outerloop_BB__38_18)
   Transition: default: LEGUP_F_outerloop_BB__38_19
state: LEGUP_F_outerloop_BB__38_19
   %52 = add i32 %50, %51 (endState: LEGUP_F_outerloop_BB__38_19)
   %64 = add i32 %52, %63 (endState: LEGUP_F_outerloop_BB__38_19)
   %66 = add i32 %64, %65 (endState: LEGUP_F_outerloop_BB__38_19)
   store i32 %66, i32* %scevgep6, align 4 (endState: LEGUP_F_outerloop_BB__38_20)
   Transition: default: LEGUP_F_outerloop_BB__38_20
state: LEGUP_F_outerloop_BB__38_20
   %67 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0), i32 %66) #3 (endState: LEGUP_F_outerloop_BB__38_20)
   br label %68
   Transition: default: LEGUP_F_outerloop_BB__68_21
state: LEGUP_F_outerloop_BB__68_21
   %indvar.next = add i32 %indvar, 1 (endState: LEGUP_F_outerloop_BB__68_21)
   br label %35
   Transition: default: LEGUP_F_outerloop_BB__35_13
state: LEGUP_F_outerloop_BB__69_22
   br label %70
   Transition: default: LEGUP_F_outerloop_BB__70_23
state: LEGUP_F_outerloop_BB__70_23
   %h.0 = phi i32 [ %h7.0, %69 ], [ %g.0, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %g.0 = phi i32 [ %h6.0, %69 ], [ %f.0, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %f.0 = phi i32 [ %h5.0, %69 ], [ %e.0, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %e.0 = phi i32 [ %h4.0, %69 ], [ %112, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %d.0 = phi i32 [ %h3.0, %69 ], [ %c.0, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %c.0 = phi i32 [ %h2.0, %69 ], [ %b.0, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %b.0 = phi i32 [ %h1.0, %69 ], [ %a.0, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %a.0 = phi i32 [ %h0.0, %69 ], [ %111, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %71 = phi i32 [ 0, %69 ], [ %113, %94 ] (endState: LEGUP_F_outerloop_BB__70_23)
   %exitcond11 = icmp eq i32 %71, 64 (endState: LEGUP_F_outerloop_BB__70_23)
   br i1 %exitcond11, label %114, label %72
   Transition: if (%exitcond11): LEGUP_F_outerloop_BB__114_28 default: LEGUP_F_outerloop_BB__72_24
state: LEGUP_F_outerloop_BB__72_24
   %scevgep13 = getelementptr [64 x i32]* @k, i32 0, i32 %71 (endState: LEGUP_F_outerloop_BB__72_24)
   %scevgep12 = getelementptr [64 x i32]* %W, i32 0, i32 %71 (endState: LEGUP_F_outerloop_BB__72_24)
   %73 = lshr i32 %e.0, 6 (endState: LEGUP_F_outerloop_BB__72_24)
   %74 = shl i32 %e.0, 26 (endState: LEGUP_F_outerloop_BB__72_24)
   %75 = or i32 %73, %74 (endState: LEGUP_F_outerloop_BB__72_24)
   %76 = lshr i32 %e.0, 11 (endState: LEGUP_F_outerloop_BB__72_24)
   %77 = shl i32 %e.0, 21 (endState: LEGUP_F_outerloop_BB__72_24)
   %78 = or i32 %76, %77 (endState: LEGUP_F_outerloop_BB__72_24)
   %79 = xor i32 %75, %78 (endState: LEGUP_F_outerloop_BB__72_24)
   %80 = lshr i32 %e.0, 25 (endState: LEGUP_F_outerloop_BB__72_24)
   %81 = shl i32 %e.0, 7 (endState: LEGUP_F_outerloop_BB__72_24)
   %82 = or i32 %80, %81 (endState: LEGUP_F_outerloop_BB__72_24)
   %83 = xor i32 %79, %82 (endState: LEGUP_F_outerloop_BB__72_24)
   %84 = add i32 %h.0, %83 (endState: LEGUP_F_outerloop_BB__72_24)
   %85 = and i32 %e.0, %f.0 (endState: LEGUP_F_outerloop_BB__72_24)
   %86 = xor i32 %e.0, -1 (endState: LEGUP_F_outerloop_BB__72_24)
   %87 = and i32 %g.0, %86 (endState: LEGUP_F_outerloop_BB__72_24)
   %88 = xor i32 %85, %87 (endState: LEGUP_F_outerloop_BB__72_24)
   %89 = add i32 %84, %88 (endState: LEGUP_F_outerloop_BB__72_24)
   %90 = load i32* %scevgep13, align 4 (endState: LEGUP_F_outerloop_BB__72_26)
   %92 = load i32* %scevgep12, align 4 (endState: LEGUP_F_outerloop_BB__72_26)
   Transition: default: LEGUP_F_outerloop_BB__72_25
state: LEGUP_F_outerloop_BB__72_25
   Transition: default: LEGUP_F_outerloop_BB__72_26
state: LEGUP_F_outerloop_BB__72_26
   %91 = add i32 %89, %90 (endState: LEGUP_F_outerloop_BB__72_26)
   %93 = add i32 %91, %92 (endState: LEGUP_F_outerloop_BB__72_26)
   br label %94
   Transition: default: LEGUP_F_outerloop_BB__94_27
state: LEGUP_F_outerloop_BB__94_27
   %95 = lshr i32 %a.0, 2 (endState: LEGUP_F_outerloop_BB__94_27)
   %96 = shl i32 %a.0, 30 (endState: LEGUP_F_outerloop_BB__94_27)
   %97 = or i32 %95, %96 (endState: LEGUP_F_outerloop_BB__94_27)
   %98 = lshr i32 %a.0, 13 (endState: LEGUP_F_outerloop_BB__94_27)
   %99 = shl i32 %a.0, 19 (endState: LEGUP_F_outerloop_BB__94_27)
   %100 = or i32 %98, %99 (endState: LEGUP_F_outerloop_BB__94_27)
   %101 = xor i32 %97, %100 (endState: LEGUP_F_outerloop_BB__94_27)
   %102 = lshr i32 %a.0, 22 (endState: LEGUP_F_outerloop_BB__94_27)
   %103 = shl i32 %a.0, 10 (endState: LEGUP_F_outerloop_BB__94_27)
   %104 = or i32 %102, %103 (endState: LEGUP_F_outerloop_BB__94_27)
   %105 = xor i32 %101, %104 (endState: LEGUP_F_outerloop_BB__94_27)
   %106 = xor i32 %b.0, %c.0 (endState: LEGUP_F_outerloop_BB__94_27)
   %107 = and i32 %a.0, %106 (endState: LEGUP_F_outerloop_BB__94_27)
   %108 = and i32 %b.0, %c.0 (endState: LEGUP_F_outerloop_BB__94_27)
   %109 = xor i32 %107, %108 (endState: LEGUP_F_outerloop_BB__94_27)
   %110 = add i32 %105, %109 (endState: LEGUP_F_outerloop_BB__94_27)
   %111 = add i32 %93, %110 (endState: LEGUP_F_outerloop_BB__94_27)
   %112 = add i32 %d.0, %93 (endState: LEGUP_F_outerloop_BB__94_27)
   %113 = add nsw i32 %71, 1 (endState: LEGUP_F_outerloop_BB__94_27)
   br label %70
   Transition: default: LEGUP_F_outerloop_BB__70_23
state: LEGUP_F_outerloop_BB__114_28
   br label %115
   Transition: default: LEGUP_F_outerloop_BB__115_29
state: LEGUP_F_outerloop_BB__115_29
   %116 = add i32 %h.0, %h7.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %117 = add i32 %g.0, %h6.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %118 = add i32 %f.0, %h5.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %119 = add i32 %e.0, %h4.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %120 = add i32 %d.0, %h3.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %121 = add i32 %c.0, %h2.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %122 = add i32 %b.0, %h1.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %123 = add i32 %a.0, %h0.0 (endState: LEGUP_F_outerloop_BB__115_29)
   %124 = add nsw i32 %3, 1 (endState: LEGUP_F_outerloop_BB__115_29)
   br label %2
   Transition: default: LEGUP_F_outerloop_BB__2_2
state: LEGUP_F_outerloop_BB__125_30
   store i32 %h0.0, i32* %digest, align 4 (endState: LEGUP_F_outerloop_BB__125_31)
   %126 = getelementptr inbounds i32* %digest, i32 1 (endState: LEGUP_F_outerloop_BB__125_30)
   store i32 %h1.0, i32* %126, align 4 (endState: LEGUP_F_outerloop_BB__125_31)
   %127 = getelementptr inbounds i32* %digest, i32 2 (endState: LEGUP_F_outerloop_BB__125_30)
   %128 = getelementptr inbounds i32* %digest, i32 3 (endState: LEGUP_F_outerloop_BB__125_30)
   %129 = getelementptr inbounds i32* %digest, i32 4 (endState: LEGUP_F_outerloop_BB__125_30)
   %130 = getelementptr inbounds i32* %digest, i32 5 (endState: LEGUP_F_outerloop_BB__125_30)
   %131 = getelementptr inbounds i32* %digest, i32 6 (endState: LEGUP_F_outerloop_BB__125_30)
   %132 = getelementptr inbounds i32* %digest, i32 7 (endState: LEGUP_F_outerloop_BB__125_30)
   Transition: default: LEGUP_F_outerloop_BB__125_31
state: LEGUP_F_outerloop_BB__125_31
   store i32 %h2.0, i32* %127, align 4 (endState: LEGUP_F_outerloop_BB__125_32)
   store i32 %h3.0, i32* %128, align 4 (endState: LEGUP_F_outerloop_BB__125_32)
   Transition: default: LEGUP_F_outerloop_BB__125_32
state: LEGUP_F_outerloop_BB__125_32
   store i32 %h4.0, i32* %129, align 4 (endState: LEGUP_F_outerloop_BB__125_33)
   store i32 %h5.0, i32* %130, align 4 (endState: LEGUP_F_outerloop_BB__125_33)
   Transition: default: LEGUP_F_outerloop_BB__125_33
state: LEGUP_F_outerloop_BB__125_33
   store i32 %h6.0, i32* %131, align 4 (endState: LEGUP_F_outerloop_BB__125_34)
   store i32 %h7.0, i32* %132, align 4 (endState: LEGUP_F_outerloop_BB__125_34)
   Transition: default: LEGUP_F_outerloop_BB__125_34
state: LEGUP_F_outerloop_BB__125_34
   ret void
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 1
Basic Block: %2 Num States: 1
Basic Block: %8 Num States: 1
Basic Block: %9 Num States: 1
Basic Block: %12 Num States: 6
Basic Block: %32 Num States: 1
Basic Block: %34 Num States: 1
Basic Block: %35 Num States: 2
Basic Block: %38 Num States: 6
Basic Block: %68 Num States: 1
Basic Block: %69 Num States: 1
Basic Block: %70 Num States: 1
Basic Block: %72 Num States: 3
Basic Block: %94 Num States: 1
Basic Block: %114 Num States: 1
Basic Block: %115 Num States: 1
Basic Block: %125 Num States: 5
End Function: outerloop
--------------------------------------------------------------------------------

Target Family: CycloneIV
Clock period constraint: 1.000000e+02ns
Start Function: SHA256
state: LEGUP_0
   Transition: if (start): LEGUP_F_SHA256_BB__0_1 default: LEGUP_0
state: LEGUP_F_SHA256_BB__0_1
   Transition: default: LEGUP_function_call_2
state: LEGUP_function_call_2
   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3 (endState: LEGUP_function_call_2)
   Transition: if (pad_finish_final): LEGUP_F_SHA256_BB__0_3 default: LEGUP_function_call_2
state: LEGUP_F_SHA256_BB__0_3
   %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str1, i32 0, i32 0), i32 %1) #4 (endState: LEGUP_F_SHA256_BB__0_3)
   Transition: default: LEGUP_function_call_4
state: LEGUP_function_call_4
   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3 (endState: LEGUP_function_call_4)
   Transition: if (outerloop_finish_final): LEGUP_F_SHA256_BB__0_5 default: LEGUP_function_call_4
state: LEGUP_F_SHA256_BB__0_5
   ret void
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 5
End Function: SHA256
--------------------------------------------------------------------------------

Target Family: CycloneIV
Clock period constraint: 1.000000e+02ns
Start Function: legup_memcpy_1
state: LEGUP_0
   Transition: if (start): LEGUP_F_legup_memcpy_1_BB__0_1 default: LEGUP_0
state: LEGUP_F_legup_memcpy_1_BB__0_1
   %1 = alloca i32, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__0_1)
   %dt = alloca i8*, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__0_1)
   %st = alloca i8*, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__0_1)
   store i32 %n, i32* %1, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__0_2)
   store i8* %d, i8** %dt, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__0_2)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__0_2
state: LEGUP_F_legup_memcpy_1_BB__0_2
   store i8* %s, i8** %st, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__0_3)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__0_3
state: LEGUP_F_legup_memcpy_1_BB__0_3
   br label %2
   Transition: default: LEGUP_F_legup_memcpy_1_BB__2_4
state: LEGUP_F_legup_memcpy_1_BB__2_4
   %3 = load i32* %1, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__2_6)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__2_5
state: LEGUP_F_legup_memcpy_1_BB__2_5
   Transition: default: LEGUP_F_legup_memcpy_1_BB__2_6
state: LEGUP_F_legup_memcpy_1_BB__2_6
   %4 = add i32 %3, -1 (endState: LEGUP_F_legup_memcpy_1_BB__2_6)
   store i32 %4, i32* %1, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__2_7)
   %5 = icmp eq i32 %3, 0 (endState: LEGUP_F_legup_memcpy_1_BB__2_6)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__2_7
state: LEGUP_F_legup_memcpy_1_BB__2_7
   br i1 %5, label %12, label %6
   Transition: if (%5): LEGUP_F_legup_memcpy_1_BB__12_14 default: LEGUP_F_legup_memcpy_1_BB__6_8
state: LEGUP_F_legup_memcpy_1_BB__6_8
   %7 = load i8** %st, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__6_10)
   %10 = load i8** %dt, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__6_10)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__6_9
state: LEGUP_F_legup_memcpy_1_BB__6_9
   Transition: default: LEGUP_F_legup_memcpy_1_BB__6_10
state: LEGUP_F_legup_memcpy_1_BB__6_10
   %8 = getelementptr inbounds i8* %7, i32 1 (endState: LEGUP_F_legup_memcpy_1_BB__6_10)
   store i8* %8, i8** %st, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__6_11)
   %9 = load i8* %7, align 1 (endState: LEGUP_F_legup_memcpy_1_BB__6_12)
   %11 = getelementptr inbounds i8* %10, i32 1 (endState: LEGUP_F_legup_memcpy_1_BB__6_10)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__6_11
state: LEGUP_F_legup_memcpy_1_BB__6_11
   store i8* %11, i8** %dt, align 4 (endState: LEGUP_F_legup_memcpy_1_BB__6_12)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__6_12
state: LEGUP_F_legup_memcpy_1_BB__6_12
   store i8 %9, i8* %10, align 1 (endState: LEGUP_F_legup_memcpy_1_BB__6_13)
   Transition: default: LEGUP_F_legup_memcpy_1_BB__6_13
state: LEGUP_F_legup_memcpy_1_BB__6_13
   br label %2
   Transition: default: LEGUP_F_legup_memcpy_1_BB__2_4
state: LEGUP_F_legup_memcpy_1_BB__12_14
   ret void
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 3
Basic Block: %2 Num States: 4
Basic Block: %6 Num States: 6
Basic Block: %12 Num States: 1
End Function: legup_memcpy_1
--------------------------------------------------------------------------------

Target Family: CycloneIV
Clock period constraint: 1.000000e+02ns
Start Function: main
state: LEGUP_0
   Transition: if (start): LEGUP_F_main_BB__0_1 default: LEGUP_0
state: LEGUP_F_main_BB__0_1
   %msg = alloca [3 x i8], align 1 (endState: LEGUP_F_main_BB__0_1)
   %1 = getelementptr inbounds [3 x i8]* %msg, i32 0, i32 0 (endState: LEGUP_F_main_BB__0_1)
   %2 = getelementptr inbounds [3 x i8]* %msg, i32 0, i32 0 (endState: LEGUP_F_main_BB__0_1)
   Transition: default: LEGUP_function_call_2
state: LEGUP_function_call_2
   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3) (endState: LEGUP_function_call_2)
   Transition: if (legup_memcpy_1_finish_final): LEGUP_F_main_BB__0_3 default: LEGUP_function_call_2
state: LEGUP_F_main_BB__0_3
   Transition: default: LEGUP_function_call_4
state: LEGUP_function_call_4
   call void @SHA256(i8* %2, i64 3) #3 (endState: LEGUP_function_call_4)
   Transition: if (SHA256_finish_final): LEGUP_F_main_BB__0_5 default: LEGUP_function_call_4
state: LEGUP_F_main_BB__0_5
   %3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) #4 (endState: LEGUP_F_main_BB__0_5)
   br label %4
   Transition: default: LEGUP_F_main_BB__4_6
state: LEGUP_F_main_BB__4_6
   %5 = phi i32 [ 0, %0 ], [ %10, %9 ] (endState: LEGUP_F_main_BB__4_6)
   %exitcond = icmp eq i32 %5, 8 (endState: LEGUP_F_main_BB__4_6)
   br i1 %exitcond, label %11, label %6
   Transition: if (%exitcond): LEGUP_F_main_BB__11_11 default: LEGUP_F_main_BB__6_7
state: LEGUP_F_main_BB__6_7
   %scevgep = getelementptr [8 x i32]* @gDigest, i32 0, i32 %5 (endState: LEGUP_F_main_BB__6_7)
   %7 = load i32* %scevgep, align 4 (endState: LEGUP_F_main_BB__6_9)
   Transition: default: LEGUP_F_main_BB__6_8
state: LEGUP_F_main_BB__6_8
   Transition: default: LEGUP_F_main_BB__6_9
state: LEGUP_F_main_BB__6_9
   %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str3, i32 0, i32 0), i32 %7) #4 (endState: LEGUP_F_main_BB__6_9)
   br label %9
   Transition: default: LEGUP_F_main_BB__9_10
state: LEGUP_F_main_BB__9_10
   %10 = add nsw i32 %5, 1 (endState: LEGUP_F_main_BB__9_10)
   br label %4
   Transition: default: LEGUP_F_main_BB__4_6
state: LEGUP_F_main_BB__11_11
   %12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) #4 (endState: LEGUP_F_main_BB__11_11)
   ret i32 0
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 5
Basic Block: %4 Num States: 1
Basic Block: %6 Num States: 3
Basic Block: %9 Num States: 1
Basic Block: %11 Num States: 1
End Function: main
--------------------------------------------------------------------------------

