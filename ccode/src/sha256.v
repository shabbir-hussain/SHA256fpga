//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Nov 19 11:18:00 2015
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 9
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @gData = internal global [192 x i8] zeroinitializer, align 1
`define TAG_g_gData `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_gData_a {`TAG_g_gData, 23'd0}
// @gDigest = internal global [8 x i32] zeroinitializer, align 4
`define TAG_g_gDigest `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_gDigest_a {`TAG_g_gDigest, 23'd0}
// @k = internal constant [64 x i32] [i32 1116352408, i32 1899447441, i32 -1245643825, i32 -373957723, i32 961987163, i32 1508970993, i32 -1841331548, i32 -1424204075, i32 -670586216, i32 310598401, i32 ...
`define TAG_g_k `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_k_a {`TAG_g_k, 23'd0}
// @main.msg = private unnamed_addr constant [3 x i8] c"abc", align 1
`define TAG_g_mainmsg `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_mainmsg_a {`TAG_g_mainmsg, 23'd0}
//   %1 = alloca i32, align 4
`define TAG_legup_memcpy_1_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_legup_memcpy_1_0_1_a {`TAG_legup_memcpy_1_0_1, 23'd0}
//   %dt = alloca i8*, align 4
`define TAG_legup_memcpy_1_0_dt `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_legup_memcpy_1_0_dt_a {`TAG_legup_memcpy_1_0_dt, 23'd0}
//   %st = alloca i8*, align 4
`define TAG_legup_memcpy_1_0_st `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_legup_memcpy_1_0_st_a {`TAG_legup_memcpy_1_0_st, 23'd0}
//   %msg = alloca [3 x i8], align 1
`define TAG_main_0_msg `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_main_0_msg_a {`TAG_main_0_msg, 23'd0}
//   %W = alloca [64 x i32], align 4
`define TAG_outerloop_0_W `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_outerloop_0_W_a {`TAG_outerloop_0_W, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] k_address_a;
reg [5:0] k_address_b;
reg k_write_enable_a;
reg k_write_enable_b;
reg [31:0] k_in_a;
reg [31:0] k_in_b;
wire [31:0] k_out_a;
wire [31:0] k_out_b;

// @k = internal constant [64 x i32] [i32 1116352408, i32 1899447441, i32 -1245643825, i32 -373957723, i32 961987163, i32 1508970993, i32 -1841331548, i32 -1424204075, i32 -670586216, i32 310598401, i32 ...
rom_dual_port k (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( k_address_a ),
	.address_b( k_address_b ),
	.q_a( k_out_a ),
	.q_b( k_out_b)
);
defparam k.width_a = 32;
defparam k.width_b = 32;
defparam k.widthad_a = 6;
defparam k.widthad_b = 6;
defparam k.numwords_a = 64;
defparam k.numwords_b = 64;
defparam k.latency = ram_latency;
defparam k.init_file = "k.mif";

reg [7:0] gData_address_a;
reg [7:0] gData_address_b;
reg gData_write_enable_a;
reg gData_write_enable_b;
reg [7:0] gData_in_a;
reg [7:0] gData_in_b;
wire [7:0] gData_out_a;
wire [7:0] gData_out_b;

// @gData = internal global [192 x i8] zeroinitializer, align 1
ram_dual_port gData (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( gData_address_a ),
	.address_b( gData_address_b ),
	.wren_a( gData_write_enable_a ),
	.wren_b( gData_write_enable_b ),
	.data_a( gData_in_a ),
	.data_b( gData_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( gData_out_a ),
	.q_b( gData_out_b)
);
defparam gData.width_a = 8;
defparam gData.width_b = 8;
defparam gData.widthad_a = 8;
defparam gData.widthad_b = 8;
defparam gData.width_be_a = 1;
defparam gData.width_be_b = 1;
defparam gData.numwords_a = 192;
defparam gData.numwords_b = 192;
defparam gData.latency = ram_latency;
defparam gData.init_file = "gData.mif";

reg [2:0] gDigest_address_a;
reg [2:0] gDigest_address_b;
reg gDigest_write_enable_a;
reg gDigest_write_enable_b;
reg [31:0] gDigest_in_a;
reg [31:0] gDigest_in_b;
wire [31:0] gDigest_out_a;
wire [31:0] gDigest_out_b;

// @gDigest = internal global [8 x i32] zeroinitializer, align 4
ram_dual_port gDigest (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( gDigest_address_a ),
	.address_b( gDigest_address_b ),
	.wren_a( gDigest_write_enable_a ),
	.wren_b( gDigest_write_enable_b ),
	.data_a( gDigest_in_a ),
	.data_b( gDigest_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( gDigest_out_a ),
	.q_b( gDigest_out_b)
);
defparam gDigest.width_a = 32;
defparam gDigest.width_b = 32;
defparam gDigest.widthad_a = 3;
defparam gDigest.widthad_b = 3;
defparam gDigest.width_be_a = 1;
defparam gDigest.width_be_b = 1;
defparam gDigest.numwords_a = 8;
defparam gDigest.numwords_b = 8;
defparam gDigest.latency = ram_latency;
defparam gDigest.init_file = "gDigest.mif";

reg [1:0] mainmsg_address_a;
reg [1:0] mainmsg_address_b;
reg mainmsg_write_enable_a;
reg mainmsg_write_enable_b;
reg [7:0] mainmsg_in_a;
reg [7:0] mainmsg_in_b;
wire [7:0] mainmsg_out_a;
wire [7:0] mainmsg_out_b;

// @main.msg = private unnamed_addr constant [3 x i8] c"abc", align 1
rom_dual_port mainmsg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( mainmsg_address_a ),
	.address_b( mainmsg_address_b ),
	.q_a( mainmsg_out_a ),
	.q_b( mainmsg_out_b)
);
defparam mainmsg.width_a = 8;
defparam mainmsg.width_b = 8;
defparam mainmsg.widthad_a = 2;
defparam mainmsg.widthad_b = 2;
defparam mainmsg.numwords_a = 3;
defparam mainmsg.numwords_b = 3;
defparam mainmsg.latency = ram_latency;
defparam mainmsg.init_file = "mainmsg.mif";

reg [5:0] outerloop_0_W_address_a;
reg [5:0] outerloop_0_W_address_b;
reg outerloop_0_W_write_enable_a;
reg outerloop_0_W_write_enable_b;
reg [31:0] outerloop_0_W_in_a;
reg [31:0] outerloop_0_W_in_b;
wire [31:0] outerloop_0_W_out_a;
wire [31:0] outerloop_0_W_out_b;

//   %W = alloca [64 x i32], align 4
ram_dual_port outerloop_0_W (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( outerloop_0_W_address_a ),
	.address_b( outerloop_0_W_address_b ),
	.wren_a( outerloop_0_W_write_enable_a ),
	.wren_b( outerloop_0_W_write_enable_b ),
	.data_a( outerloop_0_W_in_a ),
	.data_b( outerloop_0_W_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( outerloop_0_W_out_a ),
	.q_b( outerloop_0_W_out_b)
);
defparam outerloop_0_W.width_a = 32;
defparam outerloop_0_W.width_b = 32;
defparam outerloop_0_W.widthad_a = 6;
defparam outerloop_0_W.widthad_b = 6;
defparam outerloop_0_W.width_be_a = 1;
defparam outerloop_0_W.width_be_b = 1;
defparam outerloop_0_W.numwords_a = 64;
defparam outerloop_0_W.numwords_b = 64;
defparam outerloop_0_W.latency = ram_latency;

reg [1:0] main_0_msg_address_a;
reg [1:0] main_0_msg_address_b;
reg main_0_msg_write_enable_a;
reg main_0_msg_write_enable_b;
reg [7:0] main_0_msg_in_a;
reg [7:0] main_0_msg_in_b;
wire [7:0] main_0_msg_out_a;
wire [7:0] main_0_msg_out_b;

//   %msg = alloca [3 x i8], align 1
ram_dual_port main_0_msg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_msg_address_a ),
	.address_b( main_0_msg_address_b ),
	.wren_a( main_0_msg_write_enable_a ),
	.wren_b( main_0_msg_write_enable_b ),
	.data_a( main_0_msg_in_a ),
	.data_b( main_0_msg_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_msg_out_a ),
	.q_b( main_0_msg_out_b)
);
defparam main_0_msg.width_a = 8;
defparam main_0_msg.width_b = 8;
defparam main_0_msg.widthad_a = 2;
defparam main_0_msg.widthad_b = 2;
defparam main_0_msg.width_be_a = 1;
defparam main_0_msg.width_be_b = 1;
defparam main_0_msg.numwords_a = 3;
defparam main_0_msg.numwords_b = 3;
defparam main_0_msg.latency = ram_latency;

reg [0:0] legup_memcpy_1_0_1_address_a;
reg [0:0] legup_memcpy_1_0_1_address_b;
reg legup_memcpy_1_0_1_write_enable_a;
reg legup_memcpy_1_0_1_write_enable_b;
reg [31:0] legup_memcpy_1_0_1_in_a;
reg [31:0] legup_memcpy_1_0_1_in_b;
wire [31:0] legup_memcpy_1_0_1_out_a;
wire [31:0] legup_memcpy_1_0_1_out_b;

//   %1 = alloca i32, align 4
ram_dual_port legup_memcpy_1_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_1_0_1_address_a ),
	.address_b( legup_memcpy_1_0_1_address_b ),
	.wren_a( legup_memcpy_1_0_1_write_enable_a ),
	.wren_b( legup_memcpy_1_0_1_write_enable_b ),
	.data_a( legup_memcpy_1_0_1_in_a ),
	.data_b( legup_memcpy_1_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_1_0_1_out_a ),
	.q_b( legup_memcpy_1_0_1_out_b)
);
defparam legup_memcpy_1_0_1.width_a = 32;
defparam legup_memcpy_1_0_1.width_b = 32;
defparam legup_memcpy_1_0_1.widthad_a = 1;
defparam legup_memcpy_1_0_1.widthad_b = 1;
defparam legup_memcpy_1_0_1.width_be_a = 1;
defparam legup_memcpy_1_0_1.width_be_b = 1;
defparam legup_memcpy_1_0_1.numwords_a = 1;
defparam legup_memcpy_1_0_1.numwords_b = 1;
defparam legup_memcpy_1_0_1.latency = ram_latency;

reg [0:0] legup_memcpy_1_0_dt_address_a;
reg [0:0] legup_memcpy_1_0_dt_address_b;
reg legup_memcpy_1_0_dt_write_enable_a;
reg legup_memcpy_1_0_dt_write_enable_b;
reg [31:0] legup_memcpy_1_0_dt_in_a;
reg [31:0] legup_memcpy_1_0_dt_in_b;
wire [31:0] legup_memcpy_1_0_dt_out_a;
wire [31:0] legup_memcpy_1_0_dt_out_b;

//   %dt = alloca i8*, align 4
ram_dual_port legup_memcpy_1_0_dt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_1_0_dt_address_a ),
	.address_b( legup_memcpy_1_0_dt_address_b ),
	.wren_a( legup_memcpy_1_0_dt_write_enable_a ),
	.wren_b( legup_memcpy_1_0_dt_write_enable_b ),
	.data_a( legup_memcpy_1_0_dt_in_a ),
	.data_b( legup_memcpy_1_0_dt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_1_0_dt_out_a ),
	.q_b( legup_memcpy_1_0_dt_out_b)
);
defparam legup_memcpy_1_0_dt.width_a = 32;
defparam legup_memcpy_1_0_dt.width_b = 32;
defparam legup_memcpy_1_0_dt.widthad_a = 1;
defparam legup_memcpy_1_0_dt.widthad_b = 1;
defparam legup_memcpy_1_0_dt.width_be_a = 1;
defparam legup_memcpy_1_0_dt.width_be_b = 1;
defparam legup_memcpy_1_0_dt.numwords_a = 1;
defparam legup_memcpy_1_0_dt.numwords_b = 1;
defparam legup_memcpy_1_0_dt.latency = ram_latency;

reg [0:0] legup_memcpy_1_0_st_address_a;
reg [0:0] legup_memcpy_1_0_st_address_b;
reg legup_memcpy_1_0_st_write_enable_a;
reg legup_memcpy_1_0_st_write_enable_b;
reg [31:0] legup_memcpy_1_0_st_in_a;
reg [31:0] legup_memcpy_1_0_st_in_b;
wire [31:0] legup_memcpy_1_0_st_out_a;
wire [31:0] legup_memcpy_1_0_st_out_b;

//   %st = alloca i8*, align 4
ram_dual_port legup_memcpy_1_0_st (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_1_0_st_address_a ),
	.address_b( legup_memcpy_1_0_st_address_b ),
	.wren_a( legup_memcpy_1_0_st_write_enable_a ),
	.wren_b( legup_memcpy_1_0_st_write_enable_b ),
	.data_a( legup_memcpy_1_0_st_in_a ),
	.data_b( legup_memcpy_1_0_st_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_1_0_st_out_a ),
	.q_b( legup_memcpy_1_0_st_out_b)
);
defparam legup_memcpy_1_0_st.width_a = 32;
defparam legup_memcpy_1_0_st.width_b = 32;
defparam legup_memcpy_1_0_st.widthad_a = 1;
defparam legup_memcpy_1_0_st.widthad_b = 1;
defparam legup_memcpy_1_0_st.width_be_a = 1;
defparam legup_memcpy_1_0_st.width_be_b = 1;
defparam legup_memcpy_1_0_st.numwords_a = 1;
defparam legup_memcpy_1_0_st.numwords_b = 1;
defparam legup_memcpy_1_0_st.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_k_a;
assign select_k_a = (tag_a == `TAG_g_k);
reg [ram_latency:0] select_k_reg_a;
wire [31:0] memory_controller_k_out_a;
assign memory_controller_k_out_a = {32{ select_k_reg_a[ram_latency]}} & k_out_a;

wire select_gData_a;
assign select_gData_a = (tag_a == `TAG_g_gData);
reg [ram_latency:0] select_gData_reg_a;
wire [7:0] memory_controller_gData_out_a;
assign memory_controller_gData_out_a = {8{ select_gData_reg_a[ram_latency]}} & gData_out_a;

wire select_gDigest_a;
assign select_gDigest_a = (tag_a == `TAG_g_gDigest);
reg [ram_latency:0] select_gDigest_reg_a;
wire [31:0] memory_controller_gDigest_out_a;
assign memory_controller_gDigest_out_a = {32{ select_gDigest_reg_a[ram_latency]}} & gDigest_out_a;

wire select_mainmsg_a;
assign select_mainmsg_a = (tag_a == `TAG_g_mainmsg);
reg [ram_latency:0] select_mainmsg_reg_a;
wire [7:0] memory_controller_mainmsg_out_a;
assign memory_controller_mainmsg_out_a = {8{ select_mainmsg_reg_a[ram_latency]}} & mainmsg_out_a;

wire select_outerloop_0_W_a;
assign select_outerloop_0_W_a = (tag_a == `TAG_outerloop_0_W);
reg [ram_latency:0] select_outerloop_0_W_reg_a;
wire [31:0] memory_controller_outerloop_0_W_out_a;
assign memory_controller_outerloop_0_W_out_a = {32{ select_outerloop_0_W_reg_a[ram_latency]}} & outerloop_0_W_out_a;

wire select_main_0_msg_a;
assign select_main_0_msg_a = (tag_a == `TAG_main_0_msg);
reg [ram_latency:0] select_main_0_msg_reg_a;
wire [7:0] memory_controller_main_0_msg_out_a;
assign memory_controller_main_0_msg_out_a = {8{ select_main_0_msg_reg_a[ram_latency]}} & main_0_msg_out_a;

wire select_legup_memcpy_1_0_1_a;
assign select_legup_memcpy_1_0_1_a = (tag_a == `TAG_legup_memcpy_1_0_1);
reg [ram_latency:0] select_legup_memcpy_1_0_1_reg_a;
wire [31:0] memory_controller_legup_memcpy_1_0_1_out_a;
assign memory_controller_legup_memcpy_1_0_1_out_a = {32{ select_legup_memcpy_1_0_1_reg_a[ram_latency]}} & legup_memcpy_1_0_1_out_a;

wire select_legup_memcpy_1_0_dt_a;
assign select_legup_memcpy_1_0_dt_a = (tag_a == `TAG_legup_memcpy_1_0_dt);
reg [ram_latency:0] select_legup_memcpy_1_0_dt_reg_a;
wire [31:0] memory_controller_legup_memcpy_1_0_dt_out_a;
assign memory_controller_legup_memcpy_1_0_dt_out_a = {32{ select_legup_memcpy_1_0_dt_reg_a[ram_latency]}} & legup_memcpy_1_0_dt_out_a;

wire select_legup_memcpy_1_0_st_a;
assign select_legup_memcpy_1_0_st_a = (tag_a == `TAG_legup_memcpy_1_0_st);
reg [ram_latency:0] select_legup_memcpy_1_0_st_reg_a;
wire [31:0] memory_controller_legup_memcpy_1_0_st_out_a;
assign memory_controller_legup_memcpy_1_0_st_out_a = {32{ select_legup_memcpy_1_0_st_reg_a[ram_latency]}} & legup_memcpy_1_0_st_out_a;

always @(*)
begin
	k_address_a = memory_controller_address_a [6-1+2:2] & {6{select_k_a}};
	k_write_enable_a = memory_controller_write_enable_a & select_k_a;
	k_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	gData_address_a = memory_controller_address_a [8-1+0:0] & {8{select_gData_a}};
	gData_write_enable_a = memory_controller_write_enable_a & select_gData_a;
	gData_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	gDigest_address_a = memory_controller_address_a [3-1+2:2] & {3{select_gDigest_a}};
	gDigest_write_enable_a = memory_controller_write_enable_a & select_gDigest_a;
	gDigest_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	mainmsg_address_a = memory_controller_address_a [2-1+0:0] & {2{select_mainmsg_a}};
	mainmsg_write_enable_a = memory_controller_write_enable_a & select_mainmsg_a;
	mainmsg_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	outerloop_0_W_address_a = memory_controller_address_a [6-1+2:2] & {6{select_outerloop_0_W_a}};
	outerloop_0_W_write_enable_a = memory_controller_write_enable_a & select_outerloop_0_W_a;
	outerloop_0_W_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_msg_address_a = memory_controller_address_a [2-1+0:0] & {2{select_main_0_msg_a}};
	main_0_msg_write_enable_a = memory_controller_write_enable_a & select_main_0_msg_a;
	main_0_msg_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	legup_memcpy_1_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_1_0_1_a}};
	legup_memcpy_1_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_1_0_1_a;
	legup_memcpy_1_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_1_0_dt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_1_0_dt_a}};
	legup_memcpy_1_0_dt_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_1_0_dt_a;
	legup_memcpy_1_0_dt_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_1_0_st_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_1_0_st_a}};
	legup_memcpy_1_0_st_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_1_0_st_a;
	legup_memcpy_1_0_st_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_k_reg_a[ram_latency]}} | {2{select_gDigest_reg_a[ram_latency]}} | {2{select_outerloop_0_W_reg_a[ram_latency]}} | {2{select_legup_memcpy_1_0_1_reg_a[ram_latency]}} | {2{select_legup_memcpy_1_0_dt_reg_a[ram_latency]}} | {2{select_legup_memcpy_1_0_st_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_k_out_a | memory_controller_gData_out_a | memory_controller_gDigest_out_a | memory_controller_mainmsg_out_a | memory_controller_outerloop_0_W_out_a | memory_controller_main_0_msg_out_a | memory_controller_legup_memcpy_1_0_1_out_a | memory_controller_legup_memcpy_1_0_dt_out_a | memory_controller_legup_memcpy_1_0_st_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_k_reg_a[j+1] <= select_k_reg_a[j];
select_gData_reg_a[j+1] <= select_gData_reg_a[j];
select_gDigest_reg_a[j+1] <= select_gDigest_reg_a[j];
select_mainmsg_reg_a[j+1] <= select_mainmsg_reg_a[j];
select_outerloop_0_W_reg_a[j+1] <= select_outerloop_0_W_reg_a[j];
select_main_0_msg_reg_a[j+1] <= select_main_0_msg_reg_a[j];
select_legup_memcpy_1_0_1_reg_a[j+1] <= select_legup_memcpy_1_0_1_reg_a[j];
select_legup_memcpy_1_0_dt_reg_a[j+1] <= select_legup_memcpy_1_0_dt_reg_a[j];
select_legup_memcpy_1_0_st_reg_a[j+1] <= select_legup_memcpy_1_0_st_reg_a[j];
end
always @(*)
begin
select_k_reg_a[0] <= select_k_a;
select_gData_reg_a[0] <= select_gData_a;
select_gDigest_reg_a[0] <= select_gDigest_a;
select_mainmsg_reg_a[0] <= select_mainmsg_a;
select_outerloop_0_W_reg_a[0] <= select_outerloop_0_W_a;
select_main_0_msg_reg_a[0] <= select_main_0_msg_a;
select_legup_memcpy_1_0_1_reg_a[0] <= select_legup_memcpy_1_0_1_a;
select_legup_memcpy_1_0_dt_reg_a[0] <= select_legup_memcpy_1_0_dt_a;
select_legup_memcpy_1_0_st_reg_a[0] <= select_legup_memcpy_1_0_st_a;
end

reg [2:0] select_not_struct_b;

wire select_k_b;
assign select_k_b = (tag_b == `TAG_g_k);
reg [ram_latency:0] select_k_reg_b;
wire [31:0] memory_controller_k_out_b;
assign memory_controller_k_out_b = {32{ select_k_reg_b[ram_latency]}} & k_out_b;

wire select_gData_b;
assign select_gData_b = (tag_b == `TAG_g_gData);
reg [ram_latency:0] select_gData_reg_b;
wire [7:0] memory_controller_gData_out_b;
assign memory_controller_gData_out_b = {8{ select_gData_reg_b[ram_latency]}} & gData_out_b;

wire select_gDigest_b;
assign select_gDigest_b = (tag_b == `TAG_g_gDigest);
reg [ram_latency:0] select_gDigest_reg_b;
wire [31:0] memory_controller_gDigest_out_b;
assign memory_controller_gDigest_out_b = {32{ select_gDigest_reg_b[ram_latency]}} & gDigest_out_b;

wire select_mainmsg_b;
assign select_mainmsg_b = (tag_b == `TAG_g_mainmsg);
reg [ram_latency:0] select_mainmsg_reg_b;
wire [7:0] memory_controller_mainmsg_out_b;
assign memory_controller_mainmsg_out_b = {8{ select_mainmsg_reg_b[ram_latency]}} & mainmsg_out_b;

wire select_outerloop_0_W_b;
assign select_outerloop_0_W_b = (tag_b == `TAG_outerloop_0_W);
reg [ram_latency:0] select_outerloop_0_W_reg_b;
wire [31:0] memory_controller_outerloop_0_W_out_b;
assign memory_controller_outerloop_0_W_out_b = {32{ select_outerloop_0_W_reg_b[ram_latency]}} & outerloop_0_W_out_b;

wire select_main_0_msg_b;
assign select_main_0_msg_b = (tag_b == `TAG_main_0_msg);
reg [ram_latency:0] select_main_0_msg_reg_b;
wire [7:0] memory_controller_main_0_msg_out_b;
assign memory_controller_main_0_msg_out_b = {8{ select_main_0_msg_reg_b[ram_latency]}} & main_0_msg_out_b;

wire select_legup_memcpy_1_0_1_b;
assign select_legup_memcpy_1_0_1_b = (tag_b == `TAG_legup_memcpy_1_0_1);
reg [ram_latency:0] select_legup_memcpy_1_0_1_reg_b;
wire [31:0] memory_controller_legup_memcpy_1_0_1_out_b;
assign memory_controller_legup_memcpy_1_0_1_out_b = {32{ select_legup_memcpy_1_0_1_reg_b[ram_latency]}} & legup_memcpy_1_0_1_out_b;

wire select_legup_memcpy_1_0_dt_b;
assign select_legup_memcpy_1_0_dt_b = (tag_b == `TAG_legup_memcpy_1_0_dt);
reg [ram_latency:0] select_legup_memcpy_1_0_dt_reg_b;
wire [31:0] memory_controller_legup_memcpy_1_0_dt_out_b;
assign memory_controller_legup_memcpy_1_0_dt_out_b = {32{ select_legup_memcpy_1_0_dt_reg_b[ram_latency]}} & legup_memcpy_1_0_dt_out_b;

wire select_legup_memcpy_1_0_st_b;
assign select_legup_memcpy_1_0_st_b = (tag_b == `TAG_legup_memcpy_1_0_st);
reg [ram_latency:0] select_legup_memcpy_1_0_st_reg_b;
wire [31:0] memory_controller_legup_memcpy_1_0_st_out_b;
assign memory_controller_legup_memcpy_1_0_st_out_b = {32{ select_legup_memcpy_1_0_st_reg_b[ram_latency]}} & legup_memcpy_1_0_st_out_b;

always @(*)
begin
	k_address_b = memory_controller_address_b [6-1+2:2] & {6{select_k_b}};
	k_write_enable_b = memory_controller_write_enable_b & select_k_b;
	k_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	gData_address_b = memory_controller_address_b [8-1+0:0] & {8{select_gData_b}};
	gData_write_enable_b = memory_controller_write_enable_b & select_gData_b;
	gData_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	gDigest_address_b = memory_controller_address_b [3-1+2:2] & {3{select_gDigest_b}};
	gDigest_write_enable_b = memory_controller_write_enable_b & select_gDigest_b;
	gDigest_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	mainmsg_address_b = memory_controller_address_b [2-1+0:0] & {2{select_mainmsg_b}};
	mainmsg_write_enable_b = memory_controller_write_enable_b & select_mainmsg_b;
	mainmsg_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	outerloop_0_W_address_b = memory_controller_address_b [6-1+2:2] & {6{select_outerloop_0_W_b}};
	outerloop_0_W_write_enable_b = memory_controller_write_enable_b & select_outerloop_0_W_b;
	outerloop_0_W_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_msg_address_b = memory_controller_address_b [2-1+0:0] & {2{select_main_0_msg_b}};
	main_0_msg_write_enable_b = memory_controller_write_enable_b & select_main_0_msg_b;
	main_0_msg_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	legup_memcpy_1_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_1_0_1_b}};
	legup_memcpy_1_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_1_0_1_b;
	legup_memcpy_1_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_1_0_dt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_1_0_dt_b}};
	legup_memcpy_1_0_dt_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_1_0_dt_b;
	legup_memcpy_1_0_dt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_1_0_st_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_1_0_st_b}};
	legup_memcpy_1_0_st_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_1_0_st_b;
	legup_memcpy_1_0_st_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_k_reg_b[ram_latency]}} | {2{select_gDigest_reg_b[ram_latency]}} | {2{select_outerloop_0_W_reg_b[ram_latency]}} | {2{select_legup_memcpy_1_0_1_reg_b[ram_latency]}} | {2{select_legup_memcpy_1_0_dt_reg_b[ram_latency]}} | {2{select_legup_memcpy_1_0_st_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_k_out_b | memory_controller_gData_out_b | memory_controller_gDigest_out_b | memory_controller_mainmsg_out_b | memory_controller_outerloop_0_W_out_b | memory_controller_main_0_msg_out_b | memory_controller_legup_memcpy_1_0_1_out_b | memory_controller_legup_memcpy_1_0_dt_out_b | memory_controller_legup_memcpy_1_0_st_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_k_reg_b[j+1] <= select_k_reg_b[j];
select_gData_reg_b[j+1] <= select_gData_reg_b[j];
select_gDigest_reg_b[j+1] <= select_gDigest_reg_b[j];
select_mainmsg_reg_b[j+1] <= select_mainmsg_reg_b[j];
select_outerloop_0_W_reg_b[j+1] <= select_outerloop_0_W_reg_b[j];
select_main_0_msg_reg_b[j+1] <= select_main_0_msg_reg_b[j];
select_legup_memcpy_1_0_1_reg_b[j+1] <= select_legup_memcpy_1_0_1_reg_b[j];
select_legup_memcpy_1_0_dt_reg_b[j+1] <= select_legup_memcpy_1_0_dt_reg_b[j];
select_legup_memcpy_1_0_st_reg_b[j+1] <= select_legup_memcpy_1_0_st_reg_b[j];
end
always @(*)
begin
select_k_reg_b[0] <= select_k_b;
select_gData_reg_b[0] <= select_gData_b;
select_gDigest_reg_b[0] <= select_gDigest_b;
select_mainmsg_reg_b[0] <= select_mainmsg_b;
select_outerloop_0_W_reg_b[0] <= select_outerloop_0_W_b;
select_main_0_msg_reg_b[0] <= select_main_0_msg_b;
select_legup_memcpy_1_0_1_reg_b[0] <= select_legup_memcpy_1_0_1_b;
select_legup_memcpy_1_0_dt_reg_b[0] <= select_legup_memcpy_1_0_dt_b;
select_legup_memcpy_1_0_st_reg_b[0] <= select_legup_memcpy_1_0_st_b;
end

endmodule 

`timescale 1 ns / 1 ns
module pad
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_data,
	arg_msg,
	arg_msgLen
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_pad_BB__1_1 = 6'd1;
parameter [5:0] LEGUP_F_pad_BB__3_2 = 6'd2;
parameter [5:0] LEGUP_F_pad_BB__3_3 = 6'd3;
parameter [5:0] LEGUP_F_pad_BB__3_4 = 6'd4;
parameter [5:0] LEGUP_F_pad_BB__3_5 = 6'd5;
parameter [5:0] LEGUP_F_pad_BB__8_6 = 6'd6;
parameter [5:0] LEGUP_F_pad_BB__8_7 = 6'd7;
parameter [5:0] LEGUP_F_pad_BB__12_8 = 6'd8;
parameter [5:0] LEGUP_F_pad_BB__15_9 = 6'd9;
parameter [5:0] LEGUP_F_pad_BB__15_10 = 6'd10;
parameter [5:0] LEGUP_F_pad_BB__16_11 = 6'd11;
parameter [5:0] LEGUP_F_pad_BB__16_12 = 6'd12;
parameter [5:0] LEGUP_F_pad_BB__16_13 = 6'd13;
parameter [5:0] LEGUP_F_pad_BB__16_14 = 6'd14;
parameter [5:0] LEGUP_F_pad_BB__16_15 = 6'd15;
parameter [5:0] LEGUP_F_pad_BB__16_16 = 6'd16;
parameter [5:0] LEGUP_F_pad_BB__16_17 = 6'd17;
parameter [5:0] LEGUP_F_pad_BB__16_18 = 6'd18;
parameter [5:0] LEGUP_F_pad_BB__16_19 = 6'd19;
parameter [5:0] LEGUP_F_pad_BB__16_20 = 6'd20;
parameter [5:0] LEGUP_F_pad_BB__16_21 = 6'd21;
parameter [5:0] LEGUP_F_pad_BB__16_22 = 6'd22;
parameter [5:0] LEGUP_F_pad_BB__16_23 = 6'd23;
parameter [5:0] LEGUP_F_pad_BB__16_24 = 6'd24;
parameter [5:0] LEGUP_F_pad_BB__16_25 = 6'd25;
parameter [5:0] LEGUP_F_pad_BB__16_26 = 6'd26;
parameter [5:0] LEGUP_F_pad_BB__16_27 = 6'd27;
parameter [5:0] LEGUP_F_pad_BB__16_28 = 6'd28;
parameter [5:0] LEGUP_F_pad_BB__16_29 = 6'd29;
parameter [5:0] LEGUP_F_pad_BB__16_30 = 6'd30;
parameter [5:0] LEGUP_F_pad_BB__16_31 = 6'd31;
parameter [5:0] LEGUP_F_pad_BB__16_32 = 6'd32;
parameter [5:0] LEGUP_F_pad_BB__16_33 = 6'd33;
parameter [5:0] LEGUP_F_pad_BB__16_34 = 6'd34;
parameter [5:0] LEGUP_F_pad_BB__16_35 = 6'd35;
parameter [5:0] LEGUP_F_pad_BB__16_36 = 6'd36;
parameter [5:0] LEGUP_F_pad_BB__16_37 = 6'd37;
parameter [5:0] LEGUP_F_pad_BB__16_38 = 6'd38;
parameter [5:0] LEGUP_F_pad_BB__16_39 = 6'd39;
parameter [5:0] LEGUP_F_pad_BB__16_40 = 6'd40;
parameter [5:0] LEGUP_F_pad_BB__16_41 = 6'd41;
parameter [5:0] LEGUP_F_pad_BB__16_42 = 6'd42;
parameter [5:0] LEGUP_F_pad_BB__16_43 = 6'd43;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_data;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_msg;
input [63:0] arg_msgLen;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [63:0] pad_1_indvar1;
reg [63:0] pad_1_indvar1_reg;
reg [31:0] pad_1_2;
reg [31:0] pad_1_2_reg;
reg  pad_1_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_3_4;
reg [7:0] pad_3_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_3_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_3_6_reg;
reg [31:0] pad_3_7;
reg [31:0] pad_3_7_reg;
reg [63:0] pad_3_indvarnext2;
reg [63:0] pad_3_indvarnext2_reg;
reg [31:0] pad_8_9;
reg [31:0] pad_8_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_8_10;
reg [31:0] pad_8_11;
reg [31:0] pad_8_11_reg;
reg [31:0] pad_12_indvar;
reg [31:0] pad_12_indvar_reg;
reg [31:0] pad_12_i1in;
reg [31:0] pad_12_i1in_reg;
reg [31:0] pad_12_i1;
reg [31:0] pad_12_i1_reg;
reg [31:0] pad_12_13;
reg  pad_12_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_15_scevgep;
reg [31:0] pad_15_indvarnext;
reg [31:0] pad_15_indvarnext_reg;
reg [63:0] pad_16_17;
reg [31:0] pad_16_18;
reg [31:0] pad_16_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_16_19;
reg [7:0] pad_16_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_16_21;
reg [31:0] pad_16_22;
reg [31:0] pad_signed_divide_32_0_op0;
reg [31:0] pad_signed_divide_32_0_op1;
wire [31:0] lpm_divide_pad_16_22_temp_out;
wire [31:0] pad_16_22_unused;
reg  lpm_divide_pad_16_22_en;
reg [31:0] lpm_divide_pad_16_22_out;
reg [31:0] pad_signed_divide_32_0;

/*   %22 = sdiv i32 %i.1, 64*/
lpm_divide lpm_divide_pad_16_22 (
	.quotient (lpm_divide_pad_16_22_temp_out),
	.remain (pad_16_22_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_pad_16_22_en),
	.numer (pad_signed_divide_32_0_op0),
	.denom (pad_signed_divide_32_0_op1)
);

defparam
	lpm_divide_pad_16_22.lpm_pipeline = 32,
	lpm_divide_pad_16_22.lpm_widthn = 32,
	lpm_divide_pad_16_22.lpm_widthd = 32,
	lpm_divide_pad_16_22.lpm_drepresentation = "SIGNED",
	lpm_divide_pad_16_22.lpm_nrepresentation = "SIGNED",
	lpm_divide_pad_16_22.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_pad_BB__1_1;
LEGUP_F_pad_BB__12_8:
	if ((pad_12_14 == 1'd1))
		next_state = LEGUP_F_pad_BB__16_11;
	else if ((pad_12_14 == 1'd0))
		next_state = LEGUP_F_pad_BB__15_9;
LEGUP_F_pad_BB__15_10:
		next_state = LEGUP_F_pad_BB__12_8;
LEGUP_F_pad_BB__15_9:
		next_state = LEGUP_F_pad_BB__15_10;
LEGUP_F_pad_BB__16_11:
		next_state = LEGUP_F_pad_BB__16_12;
LEGUP_F_pad_BB__16_12:
		next_state = LEGUP_F_pad_BB__16_13;
LEGUP_F_pad_BB__16_13:
		next_state = LEGUP_F_pad_BB__16_14;
LEGUP_F_pad_BB__16_14:
		next_state = LEGUP_F_pad_BB__16_15;
LEGUP_F_pad_BB__16_15:
		next_state = LEGUP_F_pad_BB__16_16;
LEGUP_F_pad_BB__16_16:
		next_state = LEGUP_F_pad_BB__16_17;
LEGUP_F_pad_BB__16_17:
		next_state = LEGUP_F_pad_BB__16_18;
LEGUP_F_pad_BB__16_18:
		next_state = LEGUP_F_pad_BB__16_19;
LEGUP_F_pad_BB__16_19:
		next_state = LEGUP_F_pad_BB__16_20;
LEGUP_F_pad_BB__16_20:
		next_state = LEGUP_F_pad_BB__16_21;
LEGUP_F_pad_BB__16_21:
		next_state = LEGUP_F_pad_BB__16_22;
LEGUP_F_pad_BB__16_22:
		next_state = LEGUP_F_pad_BB__16_23;
LEGUP_F_pad_BB__16_23:
		next_state = LEGUP_F_pad_BB__16_24;
LEGUP_F_pad_BB__16_24:
		next_state = LEGUP_F_pad_BB__16_25;
LEGUP_F_pad_BB__16_25:
		next_state = LEGUP_F_pad_BB__16_26;
LEGUP_F_pad_BB__16_26:
		next_state = LEGUP_F_pad_BB__16_27;
LEGUP_F_pad_BB__16_27:
		next_state = LEGUP_F_pad_BB__16_28;
LEGUP_F_pad_BB__16_28:
		next_state = LEGUP_F_pad_BB__16_29;
LEGUP_F_pad_BB__16_29:
		next_state = LEGUP_F_pad_BB__16_30;
LEGUP_F_pad_BB__16_30:
		next_state = LEGUP_F_pad_BB__16_31;
LEGUP_F_pad_BB__16_31:
		next_state = LEGUP_F_pad_BB__16_32;
LEGUP_F_pad_BB__16_32:
		next_state = LEGUP_F_pad_BB__16_33;
LEGUP_F_pad_BB__16_33:
		next_state = LEGUP_F_pad_BB__16_34;
LEGUP_F_pad_BB__16_34:
		next_state = LEGUP_F_pad_BB__16_35;
LEGUP_F_pad_BB__16_35:
		next_state = LEGUP_F_pad_BB__16_36;
LEGUP_F_pad_BB__16_36:
		next_state = LEGUP_F_pad_BB__16_37;
LEGUP_F_pad_BB__16_37:
		next_state = LEGUP_F_pad_BB__16_38;
LEGUP_F_pad_BB__16_38:
		next_state = LEGUP_F_pad_BB__16_39;
LEGUP_F_pad_BB__16_39:
		next_state = LEGUP_F_pad_BB__16_40;
LEGUP_F_pad_BB__16_40:
		next_state = LEGUP_F_pad_BB__16_41;
LEGUP_F_pad_BB__16_41:
		next_state = LEGUP_F_pad_BB__16_42;
LEGUP_F_pad_BB__16_42:
		next_state = LEGUP_F_pad_BB__16_43;
LEGUP_F_pad_BB__16_43:
		next_state = LEGUP_0;
LEGUP_F_pad_BB__1_1:
	if ((pad_1_exitcond == 1'd1))
		next_state = LEGUP_F_pad_BB__8_6;
	else if ((pad_1_exitcond == 1'd0))
		next_state = LEGUP_F_pad_BB__3_2;
LEGUP_F_pad_BB__3_2:
		next_state = LEGUP_F_pad_BB__3_3;
LEGUP_F_pad_BB__3_3:
		next_state = LEGUP_F_pad_BB__3_4;
LEGUP_F_pad_BB__3_4:
		next_state = LEGUP_F_pad_BB__3_5;
LEGUP_F_pad_BB__3_5:
		next_state = LEGUP_F_pad_BB__1_1;
LEGUP_F_pad_BB__8_6:
		next_state = LEGUP_F_pad_BB__8_7;
LEGUP_F_pad_BB__8_7:
		next_state = LEGUP_F_pad_BB__12_8;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* pad: %1*/
	/*   %indvar1 = phi i64 [ %indvar.next2, %3 ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		pad_1_indvar1 = 64'd0;
	end
	/* pad: %1*/
	/*   %indvar1 = phi i64 [ %indvar.next2, %3 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_pad_BB__3_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		pad_1_indvar1 = pad_3_indvarnext2_reg;
	end
end
always @(posedge clk) begin
	/* pad: %1*/
	/*   %indvar1 = phi i64 [ %indvar.next2, %3 ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		pad_1_indvar1_reg <= pad_1_indvar1;
		if (start == 1'b0 && ^(pad_1_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_1_indvar1_reg"); $finish; end
	end
	/* pad: %1*/
	/*   %indvar1 = phi i64 [ %indvar.next2, %3 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_pad_BB__3_5) & (memory_controller_waitrequest == 1'd0))) begin
		pad_1_indvar1_reg <= pad_1_indvar1;
		if (start == 1'b0 && ^(pad_1_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_1_indvar1_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %1*/
	/*   %2 = phi i32 [ %7, %3 ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		pad_1_2 = 32'd0;
	end
	/* pad: %1*/
	/*   %2 = phi i32 [ %7, %3 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_pad_BB__3_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		pad_1_2 = pad_3_7_reg;
	end
end
always @(posedge clk) begin
	/* pad: %1*/
	/*   %2 = phi i32 [ %7, %3 ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		pad_1_2_reg <= pad_1_2;
		if (start == 1'b0 && ^(pad_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_1_2_reg"); $finish; end
	end
	/* pad: %1*/
	/*   %2 = phi i32 [ %7, %3 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_pad_BB__3_5) & (memory_controller_waitrequest == 1'd0))) begin
		pad_1_2_reg <= pad_1_2;
		if (start == 1'b0 && ^(pad_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %1*/
	/*   %exitcond = icmp eq i64 %indvar1, %msgLen*/
		pad_1_exitcond = (pad_1_indvar1_reg == arg_msgLen);
end
always @(*) begin
	/* pad: %3*/
	/*   %4 = getelementptr inbounds i8* %msg, i32 %2*/
		pad_3_4 = (arg_msg + (1 * pad_1_2_reg));
end
always @(*) begin
	/* pad: %3*/
	/*   %5 = load i8* %4, align 1*/
		pad_3_5 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* pad: %3*/
	/*   %6 = getelementptr inbounds i8* %data, i32 %2*/
		pad_3_6 = (arg_data + (1 * pad_1_2_reg));
end
always @(posedge clk) begin
	/* pad: %3*/
	/*   %6 = getelementptr inbounds i8* %data, i32 %2*/
	if ((cur_state == LEGUP_F_pad_BB__3_2)) begin
		pad_3_6_reg <= pad_3_6;
		if (start == 1'b0 && ^(pad_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %3*/
	/*   %7 = add nsw i32 %2, 1*/
		pad_3_7 = (pad_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* pad: %3*/
	/*   %7 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_2)) begin
		pad_3_7_reg <= pad_3_7;
		if (start == 1'b0 && ^(pad_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_3_7_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %3*/
	/*   %indvar.next2 = add i64 %indvar1, 1*/
		pad_3_indvarnext2 = (pad_1_indvar1_reg + 64'd1);
end
always @(posedge clk) begin
	/* pad: %3*/
	/*   %indvar.next2 = add i64 %indvar1, 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_2)) begin
		pad_3_indvarnext2_reg <= pad_3_indvarnext2;
		if (start == 1'b0 && ^(pad_3_indvarnext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_3_indvarnext2_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %8*/
	/*   %9 = trunc i64 %msgLen to i32*/
		pad_8_9 = arg_msgLen[31:0];
end
always @(posedge clk) begin
	/* pad: %8*/
	/*   %9 = trunc i64 %msgLen to i32*/
	if ((cur_state == LEGUP_F_pad_BB__8_6)) begin
		pad_8_9_reg <= pad_8_9;
		if (start == 1'b0 && ^(pad_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %8*/
	/*   %10 = getelementptr inbounds i8* %data, i32 %9*/
		pad_8_10 = (arg_data + (1 * pad_8_9));
end
always @(*) begin
	/* pad: %8*/
	/*   %11 = add i32 %9, 1*/
		pad_8_11 = (pad_8_9 + 32'd1);
end
always @(posedge clk) begin
	/* pad: %8*/
	/*   %11 = add i32 %9, 1*/
	if ((cur_state == LEGUP_F_pad_BB__8_6)) begin
		pad_8_11_reg <= pad_8_11;
		if (start == 1'b0 && ^(pad_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_8_11_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %12*/
	/*   %indvar = phi i32 [ %indvar.next, %15 ], [ 0, %8 ]*/
	if (((cur_state == LEGUP_F_pad_BB__8_7) & (memory_controller_waitrequest == 1'd0))) begin
		pad_12_indvar = 32'd0;
	end
	/* pad: %12*/
	/*   %indvar = phi i32 [ %indvar.next, %15 ], [ 0, %8 ]*/
	else /* if (((cur_state == LEGUP_F_pad_BB__15_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		pad_12_indvar = pad_15_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* pad: %12*/
	/*   %indvar = phi i32 [ %indvar.next, %15 ], [ 0, %8 ]*/
	if (((cur_state == LEGUP_F_pad_BB__8_7) & (memory_controller_waitrequest == 1'd0))) begin
		pad_12_indvar_reg <= pad_12_indvar;
		if (start == 1'b0 && ^(pad_12_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_12_indvar_reg"); $finish; end
	end
	/* pad: %12*/
	/*   %indvar = phi i32 [ %indvar.next, %15 ], [ 0, %8 ]*/
	if (((cur_state == LEGUP_F_pad_BB__15_10) & (memory_controller_waitrequest == 1'd0))) begin
		pad_12_indvar_reg <= pad_12_indvar;
		if (start == 1'b0 && ^(pad_12_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_12_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %12*/
	/*   %i.1.in = add i32 %9, %indvar*/
		pad_12_i1in = (pad_8_9_reg + pad_12_indvar_reg);
end
always @(posedge clk) begin
	/* pad: %12*/
	/*   %i.1.in = add i32 %9, %indvar*/
	if ((cur_state == LEGUP_F_pad_BB__12_8)) begin
		pad_12_i1in_reg <= pad_12_i1in;
		if (start == 1'b0 && ^(pad_12_i1in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_12_i1in_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %12*/
	/*   %i.1 = add i32 %11, %indvar*/
		pad_12_i1 = (pad_8_11_reg + pad_12_indvar_reg);
end
always @(posedge clk) begin
	/* pad: %12*/
	/*   %i.1 = add i32 %11, %indvar*/
	if ((cur_state == LEGUP_F_pad_BB__12_8)) begin
		pad_12_i1_reg <= pad_12_i1;
		if (start == 1'b0 && ^(pad_12_i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_12_i1_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %12*/
	/*   %13 = and i32 %i.1, 63*/
		pad_12_13 = (pad_12_i1 & 32'd63);
end
always @(*) begin
	/* pad: %12*/
	/*   %14 = icmp eq i32 %13, 0*/
		pad_12_14 = (pad_12_13 == 32'd0);
end
always @(*) begin
	/* pad: %15*/
	/*   %scevgep = getelementptr i8* %data, i32 %i.1*/
		pad_15_scevgep = (arg_data + (1 * pad_12_i1_reg));
end
always @(*) begin
	/* pad: %15*/
	/*   %indvar.next = add i32 %indvar, 1*/
		pad_15_indvarnext = (pad_12_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* pad: %15*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_pad_BB__15_9)) begin
		pad_15_indvarnext_reg <= pad_15_indvarnext;
		if (start == 1'b0 && ^(pad_15_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_15_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %16*/
	/*   %17 = shl i64 %msgLen, 3*/
		pad_16_17 = (arg_msgLen <<< (64'd3 % 64'd64));
end
always @(*) begin
	/* pad: %16*/
	/*   %18 = add nsw i32 %i.1.in, -1*/
		pad_16_18 = (pad_12_i1in_reg + -32'd1);
end
always @(posedge clk) begin
	/* pad: %16*/
	/*   %18 = add nsw i32 %i.1.in, -1*/
	if ((cur_state == LEGUP_F_pad_BB__16_11)) begin
		pad_16_18_reg <= pad_16_18;
		if (start == 1'b0 && ^(pad_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_16_18_reg"); $finish; end
	end
end
always @(*) begin
	/* pad: %16*/
	/*   %19 = getelementptr inbounds i8* %data, i32 %18*/
		pad_16_19 = (arg_data + (1 * pad_16_18_reg));
end
always @(*) begin
	/* pad: %16*/
	/*   %20 = trunc i64 %17 to i8*/
		pad_16_20 = pad_16_17[7:0];
end
always @(*) begin
	/* pad: %16*/
	/*   %21 = getelementptr inbounds i8* %data, i32 %i.1.in*/
		pad_16_21 = (arg_data + (1 * pad_12_i1in_reg));
end
always @(*) begin
	pad_16_22 = pad_signed_divide_32_0;
end
always @(*) begin
	/* pad: %16*/
	/*   %22 = sdiv i32 %i.1, 64*/
		pad_signed_divide_32_0_op0 = pad_12_i1_reg;
end
always @(*) begin
	/* pad: %16*/
	/*   %22 = sdiv i32 %i.1, 64*/
if (reset) begin pad_signed_divide_32_0_op1 = 0; end
		pad_signed_divide_32_0_op1 = 32'd64;
end
always @(*) begin
	lpm_divide_pad_16_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_pad_16_22_out = lpm_divide_pad_16_22_temp_out;
end
always @(*) begin
	pad_signed_divide_32_0 = lpm_divide_pad_16_22_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* pad: %16*/
	/*   ret i32 %22*/
	if ((cur_state == LEGUP_F_pad_BB__16_43)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* pad: %3*/
	/*   %5 = load i8* %4, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* pad: %3*/
	/*   store i8 %5, i8* %6, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* pad: %8*/
	/*   store i8 -128, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__8_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* pad: %15*/
	/*   store i8 0, i8* %scevgep, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__15_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* pad: %16*/
	/*   store i8 %20, i8* %21, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* pad: %16*/
	/*   store i8 0, i8* %19, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_12)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* pad: %3*/
	/*   %5 = load i8* %4, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_2)) begin
		memory_controller_address_a = pad_3_4;
	end
	/* pad: %3*/
	/*   store i8 %5, i8* %6, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_4)) begin
		memory_controller_address_a = pad_3_6_reg;
	end
	/* pad: %8*/
	/*   store i8 -128, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__8_6)) begin
		memory_controller_address_a = pad_8_10;
	end
	/* pad: %15*/
	/*   store i8 0, i8* %scevgep, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__15_9)) begin
		memory_controller_address_a = pad_15_scevgep;
	end
	/* pad: %16*/
	/*   store i8 %20, i8* %21, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_11)) begin
		memory_controller_address_a = pad_16_21;
	end
	/* pad: %16*/
	/*   store i8 0, i8* %19, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_12)) begin
		memory_controller_address_a = pad_16_19;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* pad: %3*/
	/*   %5 = load i8* %4, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* pad: %3*/
	/*   store i8 %5, i8* %6, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* pad: %8*/
	/*   store i8 -128, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__8_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* pad: %15*/
	/*   store i8 0, i8* %scevgep, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__15_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* pad: %16*/
	/*   store i8 %20, i8* %21, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* pad: %16*/
	/*   store i8 0, i8* %19, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* pad: %3*/
	/*   store i8 %5, i8* %6, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_4)) begin
		memory_controller_in_a = pad_3_5;
	end
	/* pad: %8*/
	/*   store i8 -128, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__8_6)) begin
		memory_controller_in_a = -8'd128;
	end
	/* pad: %15*/
	/*   store i8 0, i8* %scevgep, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__15_9)) begin
		memory_controller_in_a = 8'd0;
	end
	/* pad: %16*/
	/*   store i8 %20, i8* %21, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_11)) begin
		memory_controller_in_a = pad_16_20;
	end
	/* pad: %16*/
	/*   store i8 0, i8* %19, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_12)) begin
		memory_controller_in_a = 8'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* pad: %3*/
	/*   %5 = load i8* %4, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_2)) begin
		memory_controller_size_a = 2'd0;
	end
	/* pad: %3*/
	/*   store i8 %5, i8* %6, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__3_4)) begin
		memory_controller_size_a = 2'd0;
	end
	/* pad: %8*/
	/*   store i8 -128, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__8_6)) begin
		memory_controller_size_a = 2'd0;
	end
	/* pad: %15*/
	/*   store i8 0, i8* %scevgep, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__15_9)) begin
		memory_controller_size_a = 2'd0;
	end
	/* pad: %16*/
	/*   store i8 %20, i8* %21, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_11)) begin
		memory_controller_size_a = 2'd0;
	end
	/* pad: %16*/
	/*   store i8 0, i8* %19, align 1*/
	if ((cur_state == LEGUP_F_pad_BB__16_12)) begin
		memory_controller_size_a = 2'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* pad: %16*/
	/*   ret i32 %22*/
	if ((cur_state == LEGUP_F_pad_BB__16_43)) begin
		return_val <= pad_16_22;
		if (start == 1'b0 && ^(pad_16_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module outerloop
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_digest,
	arg_data,
	arg_numBlocks
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_outerloop_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_outerloop_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_outerloop_BB__8_3 = 6'd3;
parameter [5:0] LEGUP_F_outerloop_BB__9_4 = 6'd4;
parameter [5:0] LEGUP_F_outerloop_BB__12_5 = 6'd5;
parameter [5:0] LEGUP_F_outerloop_BB__12_6 = 6'd6;
parameter [5:0] LEGUP_F_outerloop_BB__12_7 = 6'd7;
parameter [5:0] LEGUP_F_outerloop_BB__12_8 = 6'd8;
parameter [5:0] LEGUP_F_outerloop_BB__12_9 = 6'd9;
parameter [5:0] LEGUP_F_outerloop_BB__12_10 = 6'd10;
parameter [5:0] LEGUP_F_outerloop_BB__32_11 = 6'd11;
parameter [5:0] LEGUP_F_outerloop_BB__34_12 = 6'd12;
parameter [5:0] LEGUP_F_outerloop_BB__35_13 = 6'd13;
parameter [5:0] LEGUP_F_outerloop_BB__35_14 = 6'd14;
parameter [5:0] LEGUP_F_outerloop_BB__38_15 = 6'd15;
parameter [5:0] LEGUP_F_outerloop_BB__38_16 = 6'd16;
parameter [5:0] LEGUP_F_outerloop_BB__38_17 = 6'd17;
parameter [5:0] LEGUP_F_outerloop_BB__38_18 = 6'd18;
parameter [5:0] LEGUP_F_outerloop_BB__38_19 = 6'd19;
parameter [5:0] LEGUP_F_outerloop_BB__38_20 = 6'd20;
parameter [5:0] LEGUP_F_outerloop_BB__68_21 = 6'd21;
parameter [5:0] LEGUP_F_outerloop_BB__69_22 = 6'd22;
parameter [5:0] LEGUP_F_outerloop_BB__70_23 = 6'd23;
parameter [5:0] LEGUP_F_outerloop_BB__72_24 = 6'd24;
parameter [5:0] LEGUP_F_outerloop_BB__72_25 = 6'd25;
parameter [5:0] LEGUP_F_outerloop_BB__72_26 = 6'd26;
parameter [5:0] LEGUP_F_outerloop_BB__94_27 = 6'd27;
parameter [5:0] LEGUP_F_outerloop_BB__114_28 = 6'd28;
parameter [5:0] LEGUP_F_outerloop_BB__115_29 = 6'd29;
parameter [5:0] LEGUP_F_outerloop_BB__125_30 = 6'd30;
parameter [5:0] LEGUP_F_outerloop_BB__125_31 = 6'd31;
parameter [5:0] LEGUP_F_outerloop_BB__125_32 = 6'd32;
parameter [5:0] LEGUP_F_outerloop_BB__125_33 = 6'd33;
parameter [5:0] LEGUP_F_outerloop_BB__125_34 = 6'd34;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_digest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_data;
input [31:0] arg_numBlocks;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  outerloop_0_1;
reg [31:0] outerloop_0_smax;
reg [31:0] outerloop_0_smax_reg;
reg [31:0] outerloop_2_h70;
reg [31:0] outerloop_2_h70_reg;
reg [31:0] outerloop_2_h60;
reg [31:0] outerloop_2_h60_reg;
reg [31:0] outerloop_2_h50;
reg [31:0] outerloop_2_h50_reg;
reg [31:0] outerloop_2_h40;
reg [31:0] outerloop_2_h40_reg;
reg [31:0] outerloop_2_h30;
reg [31:0] outerloop_2_h30_reg;
reg [31:0] outerloop_2_h20;
reg [31:0] outerloop_2_h20_reg;
reg [31:0] outerloop_2_h10;
reg [31:0] outerloop_2_h10_reg;
reg [31:0] outerloop_2_h00;
reg [31:0] outerloop_2_h00_reg;
reg [31:0] outerloop_2_3;
reg [31:0] outerloop_2_3_reg;
reg [31:0] outerloop_2_4;
reg [31:0] outerloop_2_4_reg;
reg [31:0] outerloop_2_5;
reg [31:0] outerloop_2_5_reg;
reg [31:0] outerloop_2_6;
reg [31:0] outerloop_2_6_reg;
reg [31:0] outerloop_2_7;
reg [31:0] outerloop_2_7_reg;
reg  outerloop_2_exitcond14;
reg [31:0] outerloop_9_10;
reg [31:0] outerloop_9_10_reg;
reg [31:0] outerloop_9_11;
reg [31:0] outerloop_9_11_reg;
reg  outerloop_9_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep_reg;
reg [31:0] outerloop_12_13;
reg [31:0] outerloop_12_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep1_reg;
reg [31:0] outerloop_12_14;
reg [31:0] outerloop_12_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep2_reg;
reg [31:0] outerloop_12_15;
reg [31:0] outerloop_12_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep3;
reg [31:0] outerloop_12_16;
reg [31:0] outerloop_12_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_12_scevgep4;
reg [7:0] outerloop_12_17;
reg [31:0] outerloop_12_18;
reg [31:0] outerloop_12_19;
reg [7:0] outerloop_12_20;
reg [31:0] outerloop_12_21;
reg [31:0] outerloop_12_22;
reg [31:0] outerloop_12_23;
reg [31:0] outerloop_12_23_reg;
reg [7:0] outerloop_12_24;
reg [31:0] outerloop_12_25;
reg [31:0] outerloop_12_26;
reg [31:0] outerloop_12_27;
reg [7:0] outerloop_12_28;
reg [31:0] outerloop_12_29;
reg [31:0] outerloop_12_30;
reg [31:0] outerloop_12_30_reg;
reg [31:0] outerloop_32_33;
reg [31:0] outerloop_35_indvar;
reg [31:0] outerloop_35_indvar_reg;
reg [31:0] outerloop_35_36;
reg [31:0] outerloop_35_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_35_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_35_scevgep8_reg;
reg [31:0] outerloop_35_37;
reg [31:0] outerloop_35_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_35_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_35_scevgep10_reg;
reg  outerloop_35_exitcond5;
reg  outerloop_35_exitcond5_reg;
reg [31:0] outerloop_38_39;
reg [31:0] outerloop_38_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_38_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_38_scevgep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_38_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_38_scevgep7_reg;
reg [31:0] outerloop_38_t1;
reg [31:0] outerloop_38_t1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_38_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_38_scevgep6_reg;
reg [31:0] outerloop_38_40;
reg [31:0] outerloop_38_41;
reg [31:0] outerloop_38_42;
reg [31:0] outerloop_38_43;
reg [31:0] outerloop_38_44;
reg [31:0] outerloop_38_45;
reg [31:0] outerloop_38_46;
reg [31:0] outerloop_38_47;
reg [31:0] outerloop_38_48;
reg [31:0] outerloop_38_49;
reg [31:0] outerloop_38_50;
reg [31:0] outerloop_38_50_reg;
reg [31:0] outerloop_38_51;
reg [31:0] outerloop_38_52;
reg [31:0] outerloop_38_53;
reg [31:0] outerloop_38_54;
reg [31:0] outerloop_38_55;
reg [31:0] outerloop_38_56;
reg [31:0] outerloop_38_57;
reg [31:0] outerloop_38_58;
reg [31:0] outerloop_38_59;
reg [31:0] outerloop_38_60;
reg [31:0] outerloop_38_61;
reg [31:0] outerloop_38_62;
reg [31:0] outerloop_38_63;
reg [31:0] outerloop_38_63_reg;
reg [31:0] outerloop_38_64;
reg [31:0] outerloop_38_65;
reg [31:0] outerloop_38_66;
reg [31:0] outerloop_38_66_reg;
reg [31:0] outerloop_68_indvarnext;
reg [31:0] outerloop_70_h0;
reg [31:0] outerloop_70_h0_reg;
reg [31:0] outerloop_70_g0;
reg [31:0] outerloop_70_g0_reg;
reg [31:0] outerloop_70_f0;
reg [31:0] outerloop_70_f0_reg;
reg [31:0] outerloop_70_e0;
reg [31:0] outerloop_70_e0_reg;
reg [31:0] outerloop_70_d0;
reg [31:0] outerloop_70_d0_reg;
reg [31:0] outerloop_70_c0;
reg [31:0] outerloop_70_c0_reg;
reg [31:0] outerloop_70_b0;
reg [31:0] outerloop_70_b0_reg;
reg [31:0] outerloop_70_a0;
reg [31:0] outerloop_70_a0_reg;
reg [31:0] outerloop_70_71;
reg [31:0] outerloop_70_71_reg;
reg  outerloop_70_exitcond11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_72_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_72_scevgep12;
reg [31:0] outerloop_72_73;
reg [31:0] outerloop_72_74;
reg [31:0] outerloop_72_75;
reg [31:0] outerloop_72_76;
reg [31:0] outerloop_72_77;
reg [31:0] outerloop_72_78;
reg [31:0] outerloop_72_79;
reg [31:0] outerloop_72_80;
reg [31:0] outerloop_72_81;
reg [31:0] outerloop_72_82;
reg [31:0] outerloop_72_83;
reg [31:0] outerloop_72_84;
reg [31:0] outerloop_72_85;
reg [31:0] outerloop_72_86;
reg [31:0] outerloop_72_87;
reg [31:0] outerloop_72_88;
reg [31:0] outerloop_72_89;
reg [31:0] outerloop_72_89_reg;
reg [31:0] outerloop_72_90;
reg [31:0] outerloop_72_91;
reg [31:0] outerloop_72_92;
reg [31:0] outerloop_72_93;
reg [31:0] outerloop_72_93_reg;
reg [31:0] outerloop_94_95;
reg [31:0] outerloop_94_96;
reg [31:0] outerloop_94_97;
reg [31:0] outerloop_94_98;
reg [31:0] outerloop_94_99;
reg [31:0] outerloop_94_100;
reg [31:0] outerloop_94_101;
reg [31:0] outerloop_94_102;
reg [31:0] outerloop_94_103;
reg [31:0] outerloop_94_104;
reg [31:0] outerloop_94_105;
reg [31:0] outerloop_94_106;
reg [31:0] outerloop_94_107;
reg [31:0] outerloop_94_108;
reg [31:0] outerloop_94_109;
reg [31:0] outerloop_94_110;
reg [31:0] outerloop_94_111;
reg [31:0] outerloop_94_112;
reg [31:0] outerloop_94_113;
reg [31:0] outerloop_115_116;
reg [31:0] outerloop_115_117;
reg [31:0] outerloop_115_118;
reg [31:0] outerloop_115_119;
reg [31:0] outerloop_115_120;
reg [31:0] outerloop_115_121;
reg [31:0] outerloop_115_122;
reg [31:0] outerloop_115_123;
reg [31:0] outerloop_115_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_125_132_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* outerloop: %12*/
	/*   %31 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0), i32 %30) #3*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_10)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("%04x\n", $signed(outerloop_12_30_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(outerloop_12_30_reg) === 1'bX) finish <= 0;
	end
	/* outerloop: %38*/
	/*   %67 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0), i32 %66) #3*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_20)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("%04x\n", $signed(outerloop_38_66_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(outerloop_38_66_reg) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_outerloop_BB__0_1;
LEGUP_F_outerloop_BB__0_1:
		next_state = LEGUP_F_outerloop_BB__2_2;
LEGUP_F_outerloop_BB__114_28:
		next_state = LEGUP_F_outerloop_BB__115_29;
LEGUP_F_outerloop_BB__115_29:
		next_state = LEGUP_F_outerloop_BB__2_2;
LEGUP_F_outerloop_BB__125_30:
		next_state = LEGUP_F_outerloop_BB__125_31;
LEGUP_F_outerloop_BB__125_31:
		next_state = LEGUP_F_outerloop_BB__125_32;
LEGUP_F_outerloop_BB__125_32:
		next_state = LEGUP_F_outerloop_BB__125_33;
LEGUP_F_outerloop_BB__125_33:
		next_state = LEGUP_F_outerloop_BB__125_34;
LEGUP_F_outerloop_BB__125_34:
		next_state = LEGUP_0;
LEGUP_F_outerloop_BB__12_10:
		next_state = LEGUP_F_outerloop_BB__32_11;
LEGUP_F_outerloop_BB__12_5:
		next_state = LEGUP_F_outerloop_BB__12_6;
LEGUP_F_outerloop_BB__12_6:
		next_state = LEGUP_F_outerloop_BB__12_7;
LEGUP_F_outerloop_BB__12_7:
		next_state = LEGUP_F_outerloop_BB__12_8;
LEGUP_F_outerloop_BB__12_8:
		next_state = LEGUP_F_outerloop_BB__12_9;
LEGUP_F_outerloop_BB__12_9:
		next_state = LEGUP_F_outerloop_BB__12_10;
LEGUP_F_outerloop_BB__2_2:
	if ((outerloop_2_exitcond14 == 1'd1))
		next_state = LEGUP_F_outerloop_BB__125_30;
	else if ((outerloop_2_exitcond14 == 1'd0))
		next_state = LEGUP_F_outerloop_BB__8_3;
LEGUP_F_outerloop_BB__32_11:
		next_state = LEGUP_F_outerloop_BB__9_4;
LEGUP_F_outerloop_BB__34_12:
		next_state = LEGUP_F_outerloop_BB__35_13;
LEGUP_F_outerloop_BB__35_13:
		next_state = LEGUP_F_outerloop_BB__35_14;
LEGUP_F_outerloop_BB__35_14:
	if ((outerloop_35_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_outerloop_BB__69_22;
	else if ((outerloop_35_exitcond5_reg == 1'd0))
		next_state = LEGUP_F_outerloop_BB__38_15;
LEGUP_F_outerloop_BB__38_15:
		next_state = LEGUP_F_outerloop_BB__38_16;
LEGUP_F_outerloop_BB__38_16:
		next_state = LEGUP_F_outerloop_BB__38_17;
LEGUP_F_outerloop_BB__38_17:
		next_state = LEGUP_F_outerloop_BB__38_18;
LEGUP_F_outerloop_BB__38_18:
		next_state = LEGUP_F_outerloop_BB__38_19;
LEGUP_F_outerloop_BB__38_19:
		next_state = LEGUP_F_outerloop_BB__38_20;
LEGUP_F_outerloop_BB__38_20:
		next_state = LEGUP_F_outerloop_BB__68_21;
LEGUP_F_outerloop_BB__68_21:
		next_state = LEGUP_F_outerloop_BB__35_13;
LEGUP_F_outerloop_BB__69_22:
		next_state = LEGUP_F_outerloop_BB__70_23;
LEGUP_F_outerloop_BB__70_23:
	if ((outerloop_70_exitcond11 == 1'd1))
		next_state = LEGUP_F_outerloop_BB__114_28;
	else if ((outerloop_70_exitcond11 == 1'd0))
		next_state = LEGUP_F_outerloop_BB__72_24;
LEGUP_F_outerloop_BB__72_24:
		next_state = LEGUP_F_outerloop_BB__72_25;
LEGUP_F_outerloop_BB__72_25:
		next_state = LEGUP_F_outerloop_BB__72_26;
LEGUP_F_outerloop_BB__72_26:
		next_state = LEGUP_F_outerloop_BB__94_27;
LEGUP_F_outerloop_BB__8_3:
		next_state = LEGUP_F_outerloop_BB__9_4;
LEGUP_F_outerloop_BB__94_27:
		next_state = LEGUP_F_outerloop_BB__70_23;
LEGUP_F_outerloop_BB__9_4:
	if ((outerloop_9_exitcond == 1'd1))
		next_state = LEGUP_F_outerloop_BB__34_12;
	else if ((outerloop_9_exitcond == 1'd0))
		next_state = LEGUP_F_outerloop_BB__12_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* outerloop: %0*/
	/*   %1 = icmp sgt i32 %numBlocks, 0*/
		outerloop_0_1 = ($signed(arg_numBlocks) > $signed(32'd0));
end
always @(*) begin
	/* outerloop: %0*/
	/*   %smax = select i1 %1, i32 %numBlocks, i32 0*/
		outerloop_0_smax = (outerloop_0_1 ? arg_numBlocks : 32'd0);
end
always @(posedge clk) begin
	/* outerloop: %0*/
	/*   %smax = select i1 %1, i32 %numBlocks, i32 0*/
	if ((cur_state == LEGUP_F_outerloop_BB__0_1)) begin
		outerloop_0_smax_reg <= outerloop_0_smax;
		if (start == 1'b0 && ^(outerloop_0_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_0_smax_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h7.0 = phi i32 [ 1541459225, %0 ], [ %116, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h70 = 32'd1541459225;
	end
	/* outerloop: %2*/
	/*   %h7.0 = phi i32 [ 1541459225, %0 ], [ %116, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h70 = outerloop_115_116;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h7.0 = phi i32 [ 1541459225, %0 ], [ %116, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h70_reg <= outerloop_2_h70;
		if (start == 1'b0 && ^(outerloop_2_h70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h70_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h7.0 = phi i32 [ 1541459225, %0 ], [ %116, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h70_reg <= outerloop_2_h70;
		if (start == 1'b0 && ^(outerloop_2_h70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h70_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h6.0 = phi i32 [ 528734635, %0 ], [ %117, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h60 = 32'd528734635;
	end
	/* outerloop: %2*/
	/*   %h6.0 = phi i32 [ 528734635, %0 ], [ %117, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h60 = outerloop_115_117;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h6.0 = phi i32 [ 528734635, %0 ], [ %117, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h60_reg <= outerloop_2_h60;
		if (start == 1'b0 && ^(outerloop_2_h60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h60_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h6.0 = phi i32 [ 528734635, %0 ], [ %117, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h60_reg <= outerloop_2_h60;
		if (start == 1'b0 && ^(outerloop_2_h60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h60_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h5.0 = phi i32 [ -1694144372, %0 ], [ %118, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h50 = -32'd1694144372;
	end
	/* outerloop: %2*/
	/*   %h5.0 = phi i32 [ -1694144372, %0 ], [ %118, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h50 = outerloop_115_118;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h5.0 = phi i32 [ -1694144372, %0 ], [ %118, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h50_reg <= outerloop_2_h50;
		if (start == 1'b0 && ^(outerloop_2_h50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h50_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h5.0 = phi i32 [ -1694144372, %0 ], [ %118, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h50_reg <= outerloop_2_h50;
		if (start == 1'b0 && ^(outerloop_2_h50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h50_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h4.0 = phi i32 [ 1359893119, %0 ], [ %119, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h40 = 32'd1359893119;
	end
	/* outerloop: %2*/
	/*   %h4.0 = phi i32 [ 1359893119, %0 ], [ %119, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h40 = outerloop_115_119;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h4.0 = phi i32 [ 1359893119, %0 ], [ %119, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h40_reg <= outerloop_2_h40;
		if (start == 1'b0 && ^(outerloop_2_h40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h40_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h4.0 = phi i32 [ 1359893119, %0 ], [ %119, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h40_reg <= outerloop_2_h40;
		if (start == 1'b0 && ^(outerloop_2_h40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h40_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h3.0 = phi i32 [ -1521486534, %0 ], [ %120, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h30 = -32'd1521486534;
	end
	/* outerloop: %2*/
	/*   %h3.0 = phi i32 [ -1521486534, %0 ], [ %120, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h30 = outerloop_115_120;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h3.0 = phi i32 [ -1521486534, %0 ], [ %120, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h30_reg <= outerloop_2_h30;
		if (start == 1'b0 && ^(outerloop_2_h30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h30_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h3.0 = phi i32 [ -1521486534, %0 ], [ %120, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h30_reg <= outerloop_2_h30;
		if (start == 1'b0 && ^(outerloop_2_h30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h30_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h2.0 = phi i32 [ 1013904242, %0 ], [ %121, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h20 = 32'd1013904242;
	end
	/* outerloop: %2*/
	/*   %h2.0 = phi i32 [ 1013904242, %0 ], [ %121, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h20 = outerloop_115_121;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h2.0 = phi i32 [ 1013904242, %0 ], [ %121, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h20_reg <= outerloop_2_h20;
		if (start == 1'b0 && ^(outerloop_2_h20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h20_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h2.0 = phi i32 [ 1013904242, %0 ], [ %121, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h20_reg <= outerloop_2_h20;
		if (start == 1'b0 && ^(outerloop_2_h20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h20_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h1.0 = phi i32 [ -1150833019, %0 ], [ %122, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h10 = -32'd1150833019;
	end
	/* outerloop: %2*/
	/*   %h1.0 = phi i32 [ -1150833019, %0 ], [ %122, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h10 = outerloop_115_122;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h1.0 = phi i32 [ -1150833019, %0 ], [ %122, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h10_reg <= outerloop_2_h10;
		if (start == 1'b0 && ^(outerloop_2_h10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h10_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h1.0 = phi i32 [ -1150833019, %0 ], [ %122, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h10_reg <= outerloop_2_h10;
		if (start == 1'b0 && ^(outerloop_2_h10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h10_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %h0.0 = phi i32 [ 1779033703, %0 ], [ %123, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h00 = 32'd1779033703;
	end
	/* outerloop: %2*/
	/*   %h0.0 = phi i32 [ 1779033703, %0 ], [ %123, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_h00 = outerloop_115_123;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %h0.0 = phi i32 [ 1779033703, %0 ], [ %123, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h00_reg <= outerloop_2_h00;
		if (start == 1'b0 && ^(outerloop_2_h00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h00_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %h0.0 = phi i32 [ 1779033703, %0 ], [ %123, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_h00_reg <= outerloop_2_h00;
		if (start == 1'b0 && ^(outerloop_2_h00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_h00_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %3 = phi i32 [ 0, %0 ], [ %124, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_3 = 32'd0;
	end
	/* outerloop: %2*/
	/*   %3 = phi i32 [ 0, %0 ], [ %124, %115 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_2_3 = outerloop_115_124;
	end
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %3 = phi i32 [ 0, %0 ], [ %124, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_3_reg <= outerloop_2_3;
		if (start == 1'b0 && ^(outerloop_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_3_reg"); $finish; end
	end
	/* outerloop: %2*/
	/*   %3 = phi i32 [ 0, %0 ], [ %124, %115 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__115_29) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_2_3_reg <= outerloop_2_3;
		if (start == 1'b0 && ^(outerloop_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %4 = shl i32 %3, 6*/
		outerloop_2_4 = (outerloop_2_3_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %4 = shl i32 %3, 6*/
	if ((cur_state == LEGUP_F_outerloop_BB__2_2)) begin
		outerloop_2_4_reg <= outerloop_2_4;
		if (start == 1'b0 && ^(outerloop_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %5 = or i32 %4, 1*/
		outerloop_2_5 = (outerloop_2_4 | 32'd1);
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %5 = or i32 %4, 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__2_2)) begin
		outerloop_2_5_reg <= outerloop_2_5;
		if (start == 1'b0 && ^(outerloop_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %6 = or i32 %4, 2*/
		outerloop_2_6 = (outerloop_2_4 | 32'd2);
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %6 = or i32 %4, 2*/
	if ((cur_state == LEGUP_F_outerloop_BB__2_2)) begin
		outerloop_2_6_reg <= outerloop_2_6;
		if (start == 1'b0 && ^(outerloop_2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_6_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %7 = or i32 %4, 3*/
		outerloop_2_7 = (outerloop_2_4 | 32'd3);
end
always @(posedge clk) begin
	/* outerloop: %2*/
	/*   %7 = or i32 %4, 3*/
	if ((cur_state == LEGUP_F_outerloop_BB__2_2)) begin
		outerloop_2_7_reg <= outerloop_2_7;
		if (start == 1'b0 && ^(outerloop_2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_2_7_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %2*/
	/*   %exitcond14 = icmp eq i32 %3, %smax*/
		outerloop_2_exitcond14 = (outerloop_2_3_reg == outerloop_0_smax_reg);
end
always @(*) begin
	/* outerloop: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %33, %32 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__8_3) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_9_10 = 32'd0;
	end
	/* outerloop: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %33, %32 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__32_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_9_10 = outerloop_32_33;
	end
end
always @(posedge clk) begin
	/* outerloop: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %33, %32 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__8_3) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_9_10_reg <= outerloop_9_10;
		if (start == 1'b0 && ^(outerloop_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_9_10_reg"); $finish; end
	end
	/* outerloop: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %33, %32 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__32_11) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_9_10_reg <= outerloop_9_10;
		if (start == 1'b0 && ^(outerloop_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %9*/
	/*   %11 = shl i32 %10, 2*/
		outerloop_9_11 = (outerloop_9_10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* outerloop: %9*/
	/*   %11 = shl i32 %10, 2*/
	if ((cur_state == LEGUP_F_outerloop_BB__9_4)) begin
		outerloop_9_11_reg <= outerloop_9_11;
		if (start == 1'b0 && ^(outerloop_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_9_11_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %9*/
	/*   %exitcond = icmp eq i32 %10, 16*/
		outerloop_9_exitcond = (outerloop_9_10_reg == 32'd16);
end
always @(*) begin
	/* outerloop: %12*/
	/*   %scevgep = getelementptr [64 x i32]* %W, i32 0, i32 %10*/
		outerloop_12_scevgep = (`TAG_outerloop_0_W_a + (4 * outerloop_9_10_reg));
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %scevgep = getelementptr [64 x i32]* %W, i32 0, i32 %10*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_5)) begin
		outerloop_12_scevgep_reg <= outerloop_12_scevgep;
		if (start == 1'b0 && ^(outerloop_12_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %13 = add i32 %7, %11*/
		outerloop_12_13 = (outerloop_2_7_reg + outerloop_9_11_reg);
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %13 = add i32 %7, %11*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_5)) begin
		outerloop_12_13_reg <= outerloop_12_13;
		if (start == 1'b0 && ^(outerloop_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %scevgep1 = getelementptr i8* %data, i32 %13*/
		outerloop_12_scevgep1 = (arg_data + (1 * outerloop_12_13_reg));
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %scevgep1 = getelementptr i8* %data, i32 %13*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		outerloop_12_scevgep1_reg <= outerloop_12_scevgep1;
		if (start == 1'b0 && ^(outerloop_12_scevgep1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_scevgep1_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %14 = add i32 %6, %11*/
		outerloop_12_14 = (outerloop_2_6_reg + outerloop_9_11_reg);
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %14 = add i32 %6, %11*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_5)) begin
		outerloop_12_14_reg <= outerloop_12_14;
		if (start == 1'b0 && ^(outerloop_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_14_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %scevgep2 = getelementptr i8* %data, i32 %14*/
		outerloop_12_scevgep2 = (arg_data + (1 * outerloop_12_14_reg));
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %scevgep2 = getelementptr i8* %data, i32 %14*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		outerloop_12_scevgep2_reg <= outerloop_12_scevgep2;
		if (start == 1'b0 && ^(outerloop_12_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %15 = add i32 %5, %11*/
		outerloop_12_15 = (outerloop_2_5_reg + outerloop_9_11_reg);
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %15 = add i32 %5, %11*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_5)) begin
		outerloop_12_15_reg <= outerloop_12_15;
		if (start == 1'b0 && ^(outerloop_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_15_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %scevgep3 = getelementptr i8* %data, i32 %15*/
		outerloop_12_scevgep3 = (arg_data + (1 * outerloop_12_15_reg));
end
always @(*) begin
	/* outerloop: %12*/
	/*   %16 = add i32 %4, %11*/
		outerloop_12_16 = (outerloop_2_4_reg + outerloop_9_11_reg);
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %16 = add i32 %4, %11*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_5)) begin
		outerloop_12_16_reg <= outerloop_12_16;
		if (start == 1'b0 && ^(outerloop_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_16_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %scevgep4 = getelementptr i8* %data, i32 %16*/
		outerloop_12_scevgep4 = (arg_data + (1 * outerloop_12_16_reg));
end
always @(*) begin
	/* outerloop: %12*/
	/*   %17 = load i8* %scevgep4, align 1*/
		outerloop_12_17 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* outerloop: %12*/
	/*   %18 = zext i8 %17 to i32*/
		outerloop_12_18 = outerloop_12_17;
end
always @(*) begin
	/* outerloop: %12*/
	/*   %19 = shl nuw i32 %18, 24*/
		outerloop_12_19 = (outerloop_12_18 <<< (32'd24 % 32));
end
always @(*) begin
	/* outerloop: %12*/
	/*   %20 = load i8* %scevgep3, align 1*/
		outerloop_12_20 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* outerloop: %12*/
	/*   %21 = zext i8 %20 to i32*/
		outerloop_12_21 = outerloop_12_20;
end
always @(*) begin
	/* outerloop: %12*/
	/*   %22 = shl nuw nsw i32 %21, 16*/
		outerloop_12_22 = (outerloop_12_21 <<< (32'd16 % 32));
end
always @(*) begin
	/* outerloop: %12*/
	/*   %23 = or i32 %19, %22*/
		outerloop_12_23 = (outerloop_12_19 | outerloop_12_22);
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %23 = or i32 %19, %22*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_8)) begin
		outerloop_12_23_reg <= outerloop_12_23;
		if (start == 1'b0 && ^(outerloop_12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_23_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %12*/
	/*   %24 = load i8* %scevgep2, align 1*/
		outerloop_12_24 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* outerloop: %12*/
	/*   %25 = zext i8 %24 to i32*/
		outerloop_12_25 = outerloop_12_24;
end
always @(*) begin
	/* outerloop: %12*/
	/*   %26 = shl nuw nsw i32 %25, 8*/
		outerloop_12_26 = (outerloop_12_25 <<< (32'd8 % 32));
end
always @(*) begin
	/* outerloop: %12*/
	/*   %27 = or i32 %23, %26*/
		outerloop_12_27 = (outerloop_12_23_reg | outerloop_12_26);
end
always @(*) begin
	/* outerloop: %12*/
	/*   %28 = load i8* %scevgep1, align 1*/
		outerloop_12_28 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* outerloop: %12*/
	/*   %29 = zext i8 %28 to i32*/
		outerloop_12_29 = outerloop_12_28;
end
always @(*) begin
	/* outerloop: %12*/
	/*   %30 = or i32 %27, %29*/
		outerloop_12_30 = (outerloop_12_27 | outerloop_12_29);
end
always @(posedge clk) begin
	/* outerloop: %12*/
	/*   %30 = or i32 %27, %29*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_9)) begin
		outerloop_12_30_reg <= outerloop_12_30;
		if (start == 1'b0 && ^(outerloop_12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_12_30_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %32*/
	/*   %33 = add nsw i32 %10, 1*/
		outerloop_32_33 = (outerloop_9_10_reg + 32'd1);
end
always @(*) begin
	/* outerloop: %35*/
	/*   %indvar = phi i32 [ %indvar.next, %68 ], [ 0, %34 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__34_12) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_35_indvar = 32'd0;
	end
	/* outerloop: %35*/
	/*   %indvar = phi i32 [ %indvar.next, %68 ], [ 0, %34 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__68_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_35_indvar = outerloop_68_indvarnext;
	end
end
always @(posedge clk) begin
	/* outerloop: %35*/
	/*   %indvar = phi i32 [ %indvar.next, %68 ], [ 0, %34 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__34_12) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_35_indvar_reg <= outerloop_35_indvar;
		if (start == 1'b0 && ^(outerloop_35_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_35_indvar_reg"); $finish; end
	end
	/* outerloop: %35*/
	/*   %indvar = phi i32 [ %indvar.next, %68 ], [ 0, %34 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__68_21) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_35_indvar_reg <= outerloop_35_indvar;
		if (start == 1'b0 && ^(outerloop_35_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_35_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %35*/
	/*   %36 = add i32 %indvar, 1*/
		outerloop_35_36 = (outerloop_35_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* outerloop: %35*/
	/*   %36 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__35_13)) begin
		outerloop_35_36_reg <= outerloop_35_36;
		if (start == 1'b0 && ^(outerloop_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_35_36_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %35*/
	/*   %scevgep8 = getelementptr [64 x i32]* %W, i32 0, i32 %36*/
		outerloop_35_scevgep8 = (`TAG_outerloop_0_W_a + (4 * outerloop_35_36_reg));
end
always @(posedge clk) begin
	/* outerloop: %35*/
	/*   %scevgep8 = getelementptr [64 x i32]* %W, i32 0, i32 %36*/
	if ((cur_state == LEGUP_F_outerloop_BB__35_14)) begin
		outerloop_35_scevgep8_reg <= outerloop_35_scevgep8;
		if (start == 1'b0 && ^(outerloop_35_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_35_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %35*/
	/*   %37 = add i32 %indvar, 14*/
		outerloop_35_37 = (outerloop_35_indvar_reg + 32'd14);
end
always @(posedge clk) begin
	/* outerloop: %35*/
	/*   %37 = add i32 %indvar, 14*/
	if ((cur_state == LEGUP_F_outerloop_BB__35_13)) begin
		outerloop_35_37_reg <= outerloop_35_37;
		if (start == 1'b0 && ^(outerloop_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_35_37_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %35*/
	/*   %scevgep10 = getelementptr [64 x i32]* %W, i32 0, i32 %37*/
		outerloop_35_scevgep10 = (`TAG_outerloop_0_W_a + (4 * outerloop_35_37_reg));
end
always @(posedge clk) begin
	/* outerloop: %35*/
	/*   %scevgep10 = getelementptr [64 x i32]* %W, i32 0, i32 %37*/
	if ((cur_state == LEGUP_F_outerloop_BB__35_14)) begin
		outerloop_35_scevgep10_reg <= outerloop_35_scevgep10;
		if (start == 1'b0 && ^(outerloop_35_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_35_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %35*/
	/*   %exitcond5 = icmp eq i32 %indvar, 48*/
		outerloop_35_exitcond5 = (outerloop_35_indvar_reg == 32'd48);
end
always @(posedge clk) begin
	/* outerloop: %35*/
	/*   %exitcond5 = icmp eq i32 %indvar, 48*/
	if ((cur_state == LEGUP_F_outerloop_BB__35_13)) begin
		outerloop_35_exitcond5_reg <= outerloop_35_exitcond5;
		if (start == 1'b0 && ^(outerloop_35_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_35_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %39 = add i32 %indvar, 9*/
		outerloop_38_39 = (outerloop_35_indvar_reg + 32'd9);
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %39 = add i32 %indvar, 9*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		outerloop_38_39_reg <= outerloop_38_39;
		if (start == 1'b0 && ^(outerloop_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_39_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %scevgep9 = getelementptr [64 x i32]* %W, i32 0, i32 %39*/
		outerloop_38_scevgep9 = (`TAG_outerloop_0_W_a + (4 * outerloop_38_39_reg));
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %scevgep9 = getelementptr [64 x i32]* %W, i32 0, i32 %39*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		outerloop_38_scevgep9_reg <= outerloop_38_scevgep9;
		if (start == 1'b0 && ^(outerloop_38_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %scevgep7 = getelementptr [64 x i32]* %W, i32 0, i32 %indvar*/
		outerloop_38_scevgep7 = (`TAG_outerloop_0_W_a + (4 * outerloop_35_indvar_reg));
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %scevgep7 = getelementptr [64 x i32]* %W, i32 0, i32 %indvar*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		outerloop_38_scevgep7_reg <= outerloop_38_scevgep7;
		if (start == 1'b0 && ^(outerloop_38_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %t.1 = add i32 %indvar, 16*/
		outerloop_38_t1 = (outerloop_35_indvar_reg + 32'd16);
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %t.1 = add i32 %indvar, 16*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		outerloop_38_t1_reg <= outerloop_38_t1;
		if (start == 1'b0 && ^(outerloop_38_t1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_t1_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %scevgep6 = getelementptr [64 x i32]* %W, i32 0, i32 %t.1*/
		outerloop_38_scevgep6 = (`TAG_outerloop_0_W_a + (4 * outerloop_38_t1_reg));
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %scevgep6 = getelementptr [64 x i32]* %W, i32 0, i32 %t.1*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		outerloop_38_scevgep6_reg <= outerloop_38_scevgep6;
		if (start == 1'b0 && ^(outerloop_38_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %40 = load i32* %scevgep10, align 4*/
		outerloop_38_40 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* outerloop: %38*/
	/*   %41 = lshr i32 %40, 17*/
		outerloop_38_41 = (outerloop_38_40 >>> (32'd17 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %42 = shl i32 %40, 15*/
		outerloop_38_42 = (outerloop_38_40 <<< (32'd15 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %43 = or i32 %41, %42*/
		outerloop_38_43 = (outerloop_38_41 | outerloop_38_42);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %44 = lshr i32 %40, 19*/
		outerloop_38_44 = (outerloop_38_40 >>> (32'd19 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %45 = shl i32 %40, 13*/
		outerloop_38_45 = (outerloop_38_40 <<< (32'd13 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %46 = or i32 %44, %45*/
		outerloop_38_46 = (outerloop_38_44 | outerloop_38_45);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %47 = xor i32 %43, %46*/
		outerloop_38_47 = (outerloop_38_43 ^ outerloop_38_46);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %48 = load i32* %scevgep10, align 4*/
		outerloop_38_48 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* outerloop: %38*/
	/*   %49 = lshr i32 %48, 10*/
		outerloop_38_49 = (outerloop_38_48 >>> (32'd10 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %50 = xor i32 %47, %49*/
		outerloop_38_50 = (outerloop_38_47 ^ outerloop_38_49);
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %50 = xor i32 %47, %49*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		outerloop_38_50_reg <= outerloop_38_50;
		if (start == 1'b0 && ^(outerloop_38_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_50_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %51 = load i32* %scevgep9, align 4*/
		outerloop_38_51 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* outerloop: %38*/
	/*   %52 = add i32 %50, %51*/
		outerloop_38_52 = (outerloop_38_50_reg + outerloop_38_51);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %53 = load i32* %scevgep8, align 4*/
		outerloop_38_53 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* outerloop: %38*/
	/*   %54 = lshr i32 %53, 7*/
		outerloop_38_54 = (outerloop_38_53 >>> (32'd7 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %55 = shl i32 %53, 25*/
		outerloop_38_55 = (outerloop_38_53 <<< (32'd25 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %56 = or i32 %54, %55*/
		outerloop_38_56 = (outerloop_38_54 | outerloop_38_55);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %57 = lshr i32 %53, 18*/
		outerloop_38_57 = (outerloop_38_53 >>> (32'd18 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %58 = shl i32 %53, 14*/
		outerloop_38_58 = (outerloop_38_53 <<< (32'd14 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %59 = or i32 %57, %58*/
		outerloop_38_59 = (outerloop_38_57 | outerloop_38_58);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %60 = xor i32 %56, %59*/
		outerloop_38_60 = (outerloop_38_56 ^ outerloop_38_59);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %61 = load i32* %scevgep8, align 4*/
		outerloop_38_61 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* outerloop: %38*/
	/*   %62 = lshr i32 %61, 3*/
		outerloop_38_62 = (outerloop_38_61 >>> (32'd3 % 32));
end
always @(*) begin
	/* outerloop: %38*/
	/*   %63 = xor i32 %60, %62*/
		outerloop_38_63 = (outerloop_38_60 ^ outerloop_38_62);
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %63 = xor i32 %60, %62*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_18)) begin
		outerloop_38_63_reg <= outerloop_38_63;
		if (start == 1'b0 && ^(outerloop_38_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_63_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %38*/
	/*   %64 = add i32 %52, %63*/
		outerloop_38_64 = (outerloop_38_52 + outerloop_38_63_reg);
end
always @(*) begin
	/* outerloop: %38*/
	/*   %65 = load i32* %scevgep7, align 4*/
		outerloop_38_65 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* outerloop: %38*/
	/*   %66 = add i32 %64, %65*/
		outerloop_38_66 = (outerloop_38_64 + outerloop_38_65);
end
always @(posedge clk) begin
	/* outerloop: %38*/
	/*   %66 = add i32 %64, %65*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_19)) begin
		outerloop_38_66_reg <= outerloop_38_66;
		if (start == 1'b0 && ^(outerloop_38_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_38_66_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %68*/
	/*   %indvar.next = add i32 %indvar, 1*/
		outerloop_68_indvarnext = (outerloop_35_indvar_reg + 32'd1);
end
always @(*) begin
	/* outerloop: %70*/
	/*   %h.0 = phi i32 [ %h7.0, %69 ], [ %g.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_h0 = outerloop_2_h70_reg;
	end
	/* outerloop: %70*/
	/*   %h.0 = phi i32 [ %h7.0, %69 ], [ %g.0, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_h0 = outerloop_70_g0_reg;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %h.0 = phi i32 [ %h7.0, %69 ], [ %g.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_h0_reg <= outerloop_70_h0;
		if (start == 1'b0 && ^(outerloop_70_h0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_h0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %h.0 = phi i32 [ %h7.0, %69 ], [ %g.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_h0_reg <= outerloop_70_h0;
		if (start == 1'b0 && ^(outerloop_70_h0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_h0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %g.0 = phi i32 [ %h6.0, %69 ], [ %f.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_g0 = outerloop_2_h60_reg;
	end
	/* outerloop: %70*/
	/*   %g.0 = phi i32 [ %h6.0, %69 ], [ %f.0, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_g0 = outerloop_70_f0_reg;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %g.0 = phi i32 [ %h6.0, %69 ], [ %f.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_g0_reg <= outerloop_70_g0;
		if (start == 1'b0 && ^(outerloop_70_g0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_g0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %g.0 = phi i32 [ %h6.0, %69 ], [ %f.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_g0_reg <= outerloop_70_g0;
		if (start == 1'b0 && ^(outerloop_70_g0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_g0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %f.0 = phi i32 [ %h5.0, %69 ], [ %e.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_f0 = outerloop_2_h50_reg;
	end
	/* outerloop: %70*/
	/*   %f.0 = phi i32 [ %h5.0, %69 ], [ %e.0, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_f0 = outerloop_70_e0_reg;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %f.0 = phi i32 [ %h5.0, %69 ], [ %e.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_f0_reg <= outerloop_70_f0;
		if (start == 1'b0 && ^(outerloop_70_f0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_f0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %f.0 = phi i32 [ %h5.0, %69 ], [ %e.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_f0_reg <= outerloop_70_f0;
		if (start == 1'b0 && ^(outerloop_70_f0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_f0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %e.0 = phi i32 [ %h4.0, %69 ], [ %112, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_e0 = outerloop_2_h40_reg;
	end
	/* outerloop: %70*/
	/*   %e.0 = phi i32 [ %h4.0, %69 ], [ %112, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_e0 = outerloop_94_112;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %e.0 = phi i32 [ %h4.0, %69 ], [ %112, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_e0_reg <= outerloop_70_e0;
		if (start == 1'b0 && ^(outerloop_70_e0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_e0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %e.0 = phi i32 [ %h4.0, %69 ], [ %112, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_e0_reg <= outerloop_70_e0;
		if (start == 1'b0 && ^(outerloop_70_e0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_e0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %d.0 = phi i32 [ %h3.0, %69 ], [ %c.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_d0 = outerloop_2_h30_reg;
	end
	/* outerloop: %70*/
	/*   %d.0 = phi i32 [ %h3.0, %69 ], [ %c.0, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_d0 = outerloop_70_c0_reg;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %d.0 = phi i32 [ %h3.0, %69 ], [ %c.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_d0_reg <= outerloop_70_d0;
		if (start == 1'b0 && ^(outerloop_70_d0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_d0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %d.0 = phi i32 [ %h3.0, %69 ], [ %c.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_d0_reg <= outerloop_70_d0;
		if (start == 1'b0 && ^(outerloop_70_d0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_d0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %c.0 = phi i32 [ %h2.0, %69 ], [ %b.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_c0 = outerloop_2_h20_reg;
	end
	/* outerloop: %70*/
	/*   %c.0 = phi i32 [ %h2.0, %69 ], [ %b.0, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_c0 = outerloop_70_b0_reg;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %c.0 = phi i32 [ %h2.0, %69 ], [ %b.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_c0_reg <= outerloop_70_c0;
		if (start == 1'b0 && ^(outerloop_70_c0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_c0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %c.0 = phi i32 [ %h2.0, %69 ], [ %b.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_c0_reg <= outerloop_70_c0;
		if (start == 1'b0 && ^(outerloop_70_c0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_c0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %b.0 = phi i32 [ %h1.0, %69 ], [ %a.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_b0 = outerloop_2_h10_reg;
	end
	/* outerloop: %70*/
	/*   %b.0 = phi i32 [ %h1.0, %69 ], [ %a.0, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_b0 = outerloop_70_a0_reg;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %b.0 = phi i32 [ %h1.0, %69 ], [ %a.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_b0_reg <= outerloop_70_b0;
		if (start == 1'b0 && ^(outerloop_70_b0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_b0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %b.0 = phi i32 [ %h1.0, %69 ], [ %a.0, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_b0_reg <= outerloop_70_b0;
		if (start == 1'b0 && ^(outerloop_70_b0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_b0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %a.0 = phi i32 [ %h0.0, %69 ], [ %111, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_a0 = outerloop_2_h00_reg;
	end
	/* outerloop: %70*/
	/*   %a.0 = phi i32 [ %h0.0, %69 ], [ %111, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_a0 = outerloop_94_111;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %a.0 = phi i32 [ %h0.0, %69 ], [ %111, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_a0_reg <= outerloop_70_a0;
		if (start == 1'b0 && ^(outerloop_70_a0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_a0_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %a.0 = phi i32 [ %h0.0, %69 ], [ %111, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_a0_reg <= outerloop_70_a0;
		if (start == 1'b0 && ^(outerloop_70_a0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_a0_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %71 = phi i32 [ 0, %69 ], [ %113, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_71 = 32'd0;
	end
	/* outerloop: %70*/
	/*   %71 = phi i32 [ 0, %69 ], [ %113, %94 ]*/
	else /* if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		outerloop_70_71 = outerloop_94_113;
	end
end
always @(posedge clk) begin
	/* outerloop: %70*/
	/*   %71 = phi i32 [ 0, %69 ], [ %113, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__69_22) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_71_reg <= outerloop_70_71;
		if (start == 1'b0 && ^(outerloop_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_71_reg"); $finish; end
	end
	/* outerloop: %70*/
	/*   %71 = phi i32 [ 0, %69 ], [ %113, %94 ]*/
	if (((cur_state == LEGUP_F_outerloop_BB__94_27) & (memory_controller_waitrequest == 1'd0))) begin
		outerloop_70_71_reg <= outerloop_70_71;
		if (start == 1'b0 && ^(outerloop_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_70_71_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %70*/
	/*   %exitcond11 = icmp eq i32 %71, 64*/
		outerloop_70_exitcond11 = (outerloop_70_71_reg == 32'd64);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %scevgep13 = getelementptr [64 x i32]* @k, i32 0, i32 %71*/
		outerloop_72_scevgep13 = (`TAG_g_k_a + (4 * outerloop_70_71_reg));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %scevgep12 = getelementptr [64 x i32]* %W, i32 0, i32 %71*/
		outerloop_72_scevgep12 = (`TAG_outerloop_0_W_a + (4 * outerloop_70_71_reg));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %73 = lshr i32 %e.0, 6*/
		outerloop_72_73 = (outerloop_70_e0_reg >>> (32'd6 % 32));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %74 = shl i32 %e.0, 26*/
		outerloop_72_74 = (outerloop_70_e0_reg <<< (32'd26 % 32));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %75 = or i32 %73, %74*/
		outerloop_72_75 = (outerloop_72_73 | outerloop_72_74);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %76 = lshr i32 %e.0, 11*/
		outerloop_72_76 = (outerloop_70_e0_reg >>> (32'd11 % 32));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %77 = shl i32 %e.0, 21*/
		outerloop_72_77 = (outerloop_70_e0_reg <<< (32'd21 % 32));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %78 = or i32 %76, %77*/
		outerloop_72_78 = (outerloop_72_76 | outerloop_72_77);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %79 = xor i32 %75, %78*/
		outerloop_72_79 = (outerloop_72_75 ^ outerloop_72_78);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %80 = lshr i32 %e.0, 25*/
		outerloop_72_80 = (outerloop_70_e0_reg >>> (32'd25 % 32));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %81 = shl i32 %e.0, 7*/
		outerloop_72_81 = (outerloop_70_e0_reg <<< (32'd7 % 32));
end
always @(*) begin
	/* outerloop: %72*/
	/*   %82 = or i32 %80, %81*/
		outerloop_72_82 = (outerloop_72_80 | outerloop_72_81);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %83 = xor i32 %79, %82*/
		outerloop_72_83 = (outerloop_72_79 ^ outerloop_72_82);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %84 = add i32 %h.0, %83*/
		outerloop_72_84 = (outerloop_70_h0_reg + outerloop_72_83);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %85 = and i32 %e.0, %f.0*/
		outerloop_72_85 = (outerloop_70_e0_reg & outerloop_70_f0_reg);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %86 = xor i32 %e.0, -1*/
		outerloop_72_86 = (outerloop_70_e0_reg ^ -32'd1);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %87 = and i32 %g.0, %86*/
		outerloop_72_87 = (outerloop_70_g0_reg & outerloop_72_86);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %88 = xor i32 %85, %87*/
		outerloop_72_88 = (outerloop_72_85 ^ outerloop_72_87);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %89 = add i32 %84, %88*/
		outerloop_72_89 = (outerloop_72_84 + outerloop_72_88);
end
always @(posedge clk) begin
	/* outerloop: %72*/
	/*   %89 = add i32 %84, %88*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		outerloop_72_89_reg <= outerloop_72_89;
		if (start == 1'b0 && ^(outerloop_72_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_72_89_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %72*/
	/*   %90 = load i32* %scevgep13, align 4*/
		outerloop_72_90 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* outerloop: %72*/
	/*   %91 = add i32 %89, %90*/
		outerloop_72_91 = (outerloop_72_89_reg + outerloop_72_90);
end
always @(*) begin
	/* outerloop: %72*/
	/*   %92 = load i32* %scevgep12, align 4*/
		outerloop_72_92 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* outerloop: %72*/
	/*   %93 = add i32 %91, %92*/
		outerloop_72_93 = (outerloop_72_91 + outerloop_72_92);
end
always @(posedge clk) begin
	/* outerloop: %72*/
	/*   %93 = add i32 %91, %92*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_26)) begin
		outerloop_72_93_reg <= outerloop_72_93;
		if (start == 1'b0 && ^(outerloop_72_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_72_93_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %94*/
	/*   %95 = lshr i32 %a.0, 2*/
		outerloop_94_95 = (outerloop_70_a0_reg >>> (32'd2 % 32));
end
always @(*) begin
	/* outerloop: %94*/
	/*   %96 = shl i32 %a.0, 30*/
		outerloop_94_96 = (outerloop_70_a0_reg <<< (32'd30 % 32));
end
always @(*) begin
	/* outerloop: %94*/
	/*   %97 = or i32 %95, %96*/
		outerloop_94_97 = (outerloop_94_95 | outerloop_94_96);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %98 = lshr i32 %a.0, 13*/
		outerloop_94_98 = (outerloop_70_a0_reg >>> (32'd13 % 32));
end
always @(*) begin
	/* outerloop: %94*/
	/*   %99 = shl i32 %a.0, 19*/
		outerloop_94_99 = (outerloop_70_a0_reg <<< (32'd19 % 32));
end
always @(*) begin
	/* outerloop: %94*/
	/*   %100 = or i32 %98, %99*/
		outerloop_94_100 = (outerloop_94_98 | outerloop_94_99);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %101 = xor i32 %97, %100*/
		outerloop_94_101 = (outerloop_94_97 ^ outerloop_94_100);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %102 = lshr i32 %a.0, 22*/
		outerloop_94_102 = (outerloop_70_a0_reg >>> (32'd22 % 32));
end
always @(*) begin
	/* outerloop: %94*/
	/*   %103 = shl i32 %a.0, 10*/
		outerloop_94_103 = (outerloop_70_a0_reg <<< (32'd10 % 32));
end
always @(*) begin
	/* outerloop: %94*/
	/*   %104 = or i32 %102, %103*/
		outerloop_94_104 = (outerloop_94_102 | outerloop_94_103);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %105 = xor i32 %101, %104*/
		outerloop_94_105 = (outerloop_94_101 ^ outerloop_94_104);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %106 = xor i32 %b.0, %c.0*/
		outerloop_94_106 = (outerloop_70_b0_reg ^ outerloop_70_c0_reg);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %107 = and i32 %a.0, %106*/
		outerloop_94_107 = (outerloop_70_a0_reg & outerloop_94_106);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %108 = and i32 %b.0, %c.0*/
		outerloop_94_108 = (outerloop_70_b0_reg & outerloop_70_c0_reg);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %109 = xor i32 %107, %108*/
		outerloop_94_109 = (outerloop_94_107 ^ outerloop_94_108);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %110 = add i32 %105, %109*/
		outerloop_94_110 = (outerloop_94_105 + outerloop_94_109);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %111 = add i32 %93, %110*/
		outerloop_94_111 = (outerloop_72_93_reg + outerloop_94_110);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %112 = add i32 %d.0, %93*/
		outerloop_94_112 = (outerloop_70_d0_reg + outerloop_72_93_reg);
end
always @(*) begin
	/* outerloop: %94*/
	/*   %113 = add nsw i32 %71, 1*/
		outerloop_94_113 = (outerloop_70_71_reg + 32'd1);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %116 = add i32 %h.0, %h7.0*/
		outerloop_115_116 = (outerloop_70_h0_reg + outerloop_2_h70_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %117 = add i32 %g.0, %h6.0*/
		outerloop_115_117 = (outerloop_70_g0_reg + outerloop_2_h60_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %118 = add i32 %f.0, %h5.0*/
		outerloop_115_118 = (outerloop_70_f0_reg + outerloop_2_h50_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %119 = add i32 %e.0, %h4.0*/
		outerloop_115_119 = (outerloop_70_e0_reg + outerloop_2_h40_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %120 = add i32 %d.0, %h3.0*/
		outerloop_115_120 = (outerloop_70_d0_reg + outerloop_2_h30_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %121 = add i32 %c.0, %h2.0*/
		outerloop_115_121 = (outerloop_70_c0_reg + outerloop_2_h20_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %122 = add i32 %b.0, %h1.0*/
		outerloop_115_122 = (outerloop_70_b0_reg + outerloop_2_h10_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %123 = add i32 %a.0, %h0.0*/
		outerloop_115_123 = (outerloop_70_a0_reg + outerloop_2_h00_reg);
end
always @(*) begin
	/* outerloop: %115*/
	/*   %124 = add nsw i32 %3, 1*/
		outerloop_115_124 = (outerloop_2_3_reg + 32'd1);
end
always @(*) begin
	/* outerloop: %125*/
	/*   %126 = getelementptr inbounds i32* %digest, i32 1*/
		outerloop_125_126 = (arg_digest + (4 * 32'd1));
end
always @(*) begin
	/* outerloop: %125*/
	/*   %127 = getelementptr inbounds i32* %digest, i32 2*/
		outerloop_125_127 = (arg_digest + (4 * 32'd2));
end
always @(posedge clk) begin
	/* outerloop: %125*/
	/*   %127 = getelementptr inbounds i32* %digest, i32 2*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		outerloop_125_127_reg <= outerloop_125_127;
		if (start == 1'b0 && ^(outerloop_125_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_125_127_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %125*/
	/*   %128 = getelementptr inbounds i32* %digest, i32 3*/
		outerloop_125_128 = (arg_digest + (4 * 32'd3));
end
always @(posedge clk) begin
	/* outerloop: %125*/
	/*   %128 = getelementptr inbounds i32* %digest, i32 3*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		outerloop_125_128_reg <= outerloop_125_128;
		if (start == 1'b0 && ^(outerloop_125_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_125_128_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %125*/
	/*   %129 = getelementptr inbounds i32* %digest, i32 4*/
		outerloop_125_129 = (arg_digest + (4 * 32'd4));
end
always @(posedge clk) begin
	/* outerloop: %125*/
	/*   %129 = getelementptr inbounds i32* %digest, i32 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		outerloop_125_129_reg <= outerloop_125_129;
		if (start == 1'b0 && ^(outerloop_125_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_125_129_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %125*/
	/*   %130 = getelementptr inbounds i32* %digest, i32 5*/
		outerloop_125_130 = (arg_digest + (4 * 32'd5));
end
always @(posedge clk) begin
	/* outerloop: %125*/
	/*   %130 = getelementptr inbounds i32* %digest, i32 5*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		outerloop_125_130_reg <= outerloop_125_130;
		if (start == 1'b0 && ^(outerloop_125_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_125_130_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %125*/
	/*   %131 = getelementptr inbounds i32* %digest, i32 6*/
		outerloop_125_131 = (arg_digest + (4 * 32'd6));
end
always @(posedge clk) begin
	/* outerloop: %125*/
	/*   %131 = getelementptr inbounds i32* %digest, i32 6*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		outerloop_125_131_reg <= outerloop_125_131;
		if (start == 1'b0 && ^(outerloop_125_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_125_131_reg"); $finish; end
	end
end
always @(*) begin
	/* outerloop: %125*/
	/*   %132 = getelementptr inbounds i32* %digest, i32 7*/
		outerloop_125_132 = (arg_digest + (4 * 32'd7));
end
always @(posedge clk) begin
	/* outerloop: %125*/
	/*   %132 = getelementptr inbounds i32* %digest, i32 7*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		outerloop_125_132_reg <= outerloop_125_132;
		if (start == 1'b0 && ^(outerloop_125_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_125_132_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* outerloop: %125*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_34)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* outerloop: %12*/
	/*   %17 = load i8* %scevgep4, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %12*/
	/*   %24 = load i8* %scevgep2, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %12*/
	/*   store i32 %30, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %38*/
	/*   %40 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %38*/
	/*   %53 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %38*/
	/*   %51 = load i32* %scevgep9, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %72*/
	/*   %90 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h0.0, i32* %digest, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h2.0, i32* %127, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h4.0, i32* %129, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h6.0, i32* %131, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* outerloop: %12*/
	/*   %17 = load i8* %scevgep4, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_address_a = outerloop_12_scevgep4;
	end
	/* outerloop: %12*/
	/*   %24 = load i8* %scevgep2, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_address_a = outerloop_12_scevgep2_reg;
	end
	/* outerloop: %12*/
	/*   store i32 %30, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_9)) begin
		memory_controller_address_a = outerloop_12_scevgep_reg;
	end
	/* outerloop: %38*/
	/*   %40 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_address_a = outerloop_35_scevgep10_reg;
	end
	/* outerloop: %38*/
	/*   %53 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_address_a = outerloop_35_scevgep8_reg;
	end
	/* outerloop: %38*/
	/*   %51 = load i32* %scevgep9, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_address_a = outerloop_38_scevgep9_reg;
	end
	/* outerloop: %72*/
	/*   %90 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_address_a = outerloop_72_scevgep13;
	end
	/* outerloop: %125*/
	/*   store i32 %h0.0, i32* %digest, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_address_a = arg_digest;
	end
	/* outerloop: %125*/
	/*   store i32 %h2.0, i32* %127, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_address_a = outerloop_125_127_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h4.0, i32* %129, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_address_a = outerloop_125_129_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h6.0, i32* %131, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_address_a = outerloop_125_131_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* outerloop: %12*/
	/*   %17 = load i8* %scevgep4, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* outerloop: %12*/
	/*   %24 = load i8* %scevgep2, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* outerloop: %12*/
	/*   store i32 %30, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* outerloop: %38*/
	/*   %40 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* outerloop: %38*/
	/*   %53 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* outerloop: %38*/
	/*   %51 = load i32* %scevgep9, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* outerloop: %72*/
	/*   %90 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* outerloop: %125*/
	/*   store i32 %h0.0, i32* %digest, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h2.0, i32* %127, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h4.0, i32* %129, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h6.0, i32* %131, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* outerloop: %12*/
	/*   store i32 %30, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_9)) begin
		memory_controller_in_a = outerloop_12_30;
	end
	/* outerloop: %125*/
	/*   store i32 %h0.0, i32* %digest, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_in_a = outerloop_2_h00_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h2.0, i32* %127, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_in_a = outerloop_2_h20_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h4.0, i32* %129, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_in_a = outerloop_2_h40_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h6.0, i32* %131, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_in_a = outerloop_2_h60_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* outerloop: %12*/
	/*   %17 = load i8* %scevgep4, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_size_a = 2'd0;
	end
	/* outerloop: %12*/
	/*   %24 = load i8* %scevgep2, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_size_a = 2'd0;
	end
	/* outerloop: %12*/
	/*   store i32 %30, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %38*/
	/*   %40 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %38*/
	/*   %53 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %38*/
	/*   %51 = load i32* %scevgep9, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %72*/
	/*   %90 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h0.0, i32* %digest, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h2.0, i32* %127, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h4.0, i32* %129, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h6.0, i32* %131, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* outerloop: %12*/
	/*   %20 = load i8* %scevgep3, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %12*/
	/*   %28 = load i8* %scevgep1, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %38*/
	/*   %48 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %38*/
	/*   %61 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %38*/
	/*   %65 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %38*/
	/*   store i32 %66, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %72*/
	/*   %92 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h1.0, i32* %126, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h3.0, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h5.0, i32* %130, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h7.0, i32* %132, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* outerloop: %12*/
	/*   %20 = load i8* %scevgep3, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_address_b = outerloop_12_scevgep3;
	end
	/* outerloop: %12*/
	/*   %28 = load i8* %scevgep1, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_address_b = outerloop_12_scevgep1_reg;
	end
	/* outerloop: %38*/
	/*   %48 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_address_b = outerloop_35_scevgep10_reg;
	end
	/* outerloop: %38*/
	/*   %61 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_address_b = outerloop_35_scevgep8_reg;
	end
	/* outerloop: %38*/
	/*   %65 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_address_b = outerloop_38_scevgep7_reg;
	end
	/* outerloop: %38*/
	/*   store i32 %66, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_19)) begin
		memory_controller_address_b = outerloop_38_scevgep6_reg;
	end
	/* outerloop: %72*/
	/*   %92 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_address_b = outerloop_72_scevgep12;
	end
	/* outerloop: %125*/
	/*   store i32 %h1.0, i32* %126, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_address_b = outerloop_125_126;
	end
	/* outerloop: %125*/
	/*   store i32 %h3.0, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_address_b = outerloop_125_128_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h5.0, i32* %130, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_address_b = outerloop_125_130_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h7.0, i32* %132, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_address_b = outerloop_125_132_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* outerloop: %12*/
	/*   %20 = load i8* %scevgep3, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* outerloop: %12*/
	/*   %28 = load i8* %scevgep1, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* outerloop: %38*/
	/*   %48 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* outerloop: %38*/
	/*   %61 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* outerloop: %38*/
	/*   %65 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* outerloop: %38*/
	/*   store i32 %66, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* outerloop: %72*/
	/*   %92 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* outerloop: %125*/
	/*   store i32 %h1.0, i32* %126, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h3.0, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h5.0, i32* %130, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* outerloop: %125*/
	/*   store i32 %h7.0, i32* %132, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* outerloop: %38*/
	/*   store i32 %66, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_19)) begin
		memory_controller_in_b = outerloop_38_66;
	end
	/* outerloop: %125*/
	/*   store i32 %h1.0, i32* %126, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_in_b = outerloop_2_h10_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h3.0, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_in_b = outerloop_2_h30_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h5.0, i32* %130, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_in_b = outerloop_2_h50_reg;
	end
	/* outerloop: %125*/
	/*   store i32 %h7.0, i32* %132, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_in_b = outerloop_2_h70_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* outerloop: %12*/
	/*   %20 = load i8* %scevgep3, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_6)) begin
		memory_controller_size_b = 2'd0;
	end
	/* outerloop: %12*/
	/*   %28 = load i8* %scevgep1, align 1*/
	if ((cur_state == LEGUP_F_outerloop_BB__12_7)) begin
		memory_controller_size_b = 2'd0;
	end
	/* outerloop: %38*/
	/*   %48 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %38*/
	/*   %61 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %38*/
	/*   %65 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %38*/
	/*   store i32 %66, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__38_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %72*/
	/*   %92 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__72_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h1.0, i32* %126, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h3.0, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h5.0, i32* %130, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* outerloop: %125*/
	/*   store i32 %h7.0, i32* %132, align 4*/
	if ((cur_state == LEGUP_F_outerloop_BB__125_33)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module SHA256
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_msg,
	arg_msgLen
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_SHA256_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_SHA256_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_SHA256_BB__0_5 = 3'd5;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [2:0] LEGUP_function_call_2 = 3'd2;
parameter [2:0] LEGUP_function_call_4 = 3'd4;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_msg;
input [63:0] arg_msgLen;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] SHA256_0_1;
reg [31:0] SHA256_0_1_reg;
reg  pad_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_arg_data;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_arg_msg;
reg [63:0] pad_arg_msgLen;
wire  pad_memory_controller_enable_a;
wire  pad_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] pad_memory_controller_in_a;
wire [1:0] pad_memory_controller_size_a;
wire  pad_memory_controller_enable_b;
wire  pad_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] pad_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] pad_memory_controller_in_b;
wire [1:0] pad_memory_controller_size_b;
reg  pad_finish_final;
reg  pad_finish_reg;
wire  pad_finish;
wire [31:0] pad_return_val;
reg [31:0] pad_return_val_reg;
reg  outerloop_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_arg_digest;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_arg_data;
reg [31:0] outerloop_arg_numBlocks;
wire  outerloop_memory_controller_enable_a;
wire  outerloop_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] outerloop_memory_controller_in_a;
wire [1:0] outerloop_memory_controller_size_a;
wire  outerloop_memory_controller_enable_b;
wire  outerloop_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] outerloop_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] outerloop_memory_controller_in_b;
wire [1:0] outerloop_memory_controller_size_b;
reg  outerloop_finish_final;
reg  outerloop_finish_reg;
wire  outerloop_finish;


pad pad (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (pad_memory_controller_enable_a),
	.memory_controller_address_a (pad_memory_controller_address_a),
	.memory_controller_write_enable_a (pad_memory_controller_write_enable_a),
	.memory_controller_in_a (pad_memory_controller_in_a),
	.memory_controller_size_a (pad_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (pad_memory_controller_enable_b),
	.memory_controller_address_b (pad_memory_controller_address_b),
	.memory_controller_write_enable_b (pad_memory_controller_write_enable_b),
	.memory_controller_in_b (pad_memory_controller_in_b),
	.memory_controller_size_b (pad_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (pad_start),
	.finish (pad_finish),
	.return_val (pad_return_val),
	.arg_data (pad_arg_data),
	.arg_msg (pad_arg_msg),
	.arg_msgLen (pad_arg_msgLen)
);

defparam
	pad.tag_offset = tag_offset;


outerloop outerloop (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (outerloop_memory_controller_enable_a),
	.memory_controller_address_a (outerloop_memory_controller_address_a),
	.memory_controller_write_enable_a (outerloop_memory_controller_write_enable_a),
	.memory_controller_in_a (outerloop_memory_controller_in_a),
	.memory_controller_size_a (outerloop_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (outerloop_memory_controller_enable_b),
	.memory_controller_address_b (outerloop_memory_controller_address_b),
	.memory_controller_write_enable_b (outerloop_memory_controller_write_enable_b),
	.memory_controller_in_b (outerloop_memory_controller_in_b),
	.memory_controller_size_b (outerloop_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (outerloop_start),
	.finish (outerloop_finish),
	.arg_digest (outerloop_arg_digest),
	.arg_data (outerloop_arg_data),
	.arg_numBlocks (outerloop_arg_numBlocks)
);

defparam
	outerloop.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* SHA256: %0*/
	/*   %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str1, i32 0, i32 0), i32 %1) #4*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_3)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("padded to %d blocks\n", $signed(SHA256_0_1_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(SHA256_0_1_reg) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_SHA256_BB__0_1;
LEGUP_F_SHA256_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_SHA256_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_SHA256_BB__0_5:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((pad_finish_final == 1'd1))
		next_state = LEGUP_F_SHA256_BB__0_3;
LEGUP_function_call_4:
	if ((outerloop_finish_final == 1'd1))
		next_state = LEGUP_F_SHA256_BB__0_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
		SHA256_0_1 = pad_return_val_reg;
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		SHA256_0_1_reg <= SHA256_0_1;
		if (start == 1'b0 && ^(SHA256_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to SHA256_0_1_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_1)) begin
		pad_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		pad_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_1)) begin
		pad_arg_data <= `TAG_g_gData_a;
		if (start == 1'b0 && ^(`TAG_g_gData_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_arg_data"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_1)) begin
		pad_arg_msg <= arg_msg;
		if (start == 1'b0 && ^(arg_msg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_arg_msg"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_1)) begin
		pad_arg_msgLen <= arg_msgLen;
		if (start == 1'b0 && ^(arg_msgLen) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_arg_msgLen"); $finish; end
	end
end
always @(*) begin
	pad_finish_final = pad_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_SHA256_BB__0_1))) begin
		pad_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_finish_reg"); $finish; end
	end
	if (pad_finish) begin
		pad_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_SHA256_BB__0_1))) begin
		pad_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_return_val_reg"); $finish; end
	end
	if (pad_finish) begin
		pad_return_val_reg <= pad_return_val;
		if (start == 1'b0 && ^(pad_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to pad_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_3)) begin
		outerloop_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		outerloop_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_3)) begin
		outerloop_arg_digest <= `TAG_g_gDigest_a;
		if (start == 1'b0 && ^(`TAG_g_gDigest_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_arg_digest"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_3)) begin
		outerloop_arg_data <= `TAG_g_gData_a;
		if (start == 1'b0 && ^(`TAG_g_gData_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_arg_data"); $finish; end
	end
end
always @(posedge clk) begin
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_3)) begin
		outerloop_arg_numBlocks <= SHA256_0_1_reg;
		if (start == 1'b0 && ^(SHA256_0_1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_arg_numBlocks"); $finish; end
	end
end
always @(*) begin
	outerloop_finish_final = outerloop_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_SHA256_BB__0_3))) begin
		outerloop_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_finish_reg"); $finish; end
	end
	if (outerloop_finish) begin
		outerloop_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to outerloop_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* SHA256: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_SHA256_BB__0_5)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = pad_memory_controller_enable_a;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = pad_memory_controller_enable_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = outerloop_memory_controller_enable_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = outerloop_memory_controller_enable_a;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = pad_memory_controller_address_a;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = pad_memory_controller_address_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = outerloop_memory_controller_address_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = outerloop_memory_controller_address_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = pad_memory_controller_write_enable_a;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = pad_memory_controller_write_enable_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = outerloop_memory_controller_write_enable_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = outerloop_memory_controller_write_enable_a;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = pad_memory_controller_in_a;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = pad_memory_controller_in_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = outerloop_memory_controller_in_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = outerloop_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = pad_memory_controller_size_a;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = pad_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = outerloop_memory_controller_size_a;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = outerloop_memory_controller_size_a;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = pad_memory_controller_enable_b;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = pad_memory_controller_enable_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = outerloop_memory_controller_enable_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = outerloop_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = pad_memory_controller_address_b;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = pad_memory_controller_address_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = outerloop_memory_controller_address_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = outerloop_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = pad_memory_controller_write_enable_b;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = pad_memory_controller_write_enable_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = outerloop_memory_controller_write_enable_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = outerloop_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = pad_memory_controller_in_b;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = pad_memory_controller_in_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = outerloop_memory_controller_in_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = outerloop_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = pad_memory_controller_size_b;
	end
	/* SHA256: %0*/
	/*   %1 = call i32 @pad(i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i8* %msg, i64 %msgLen) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = pad_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = outerloop_memory_controller_size_b;
	end
	/* SHA256: %0*/
	/*   call void @outerloop(i32* getelementptr inbounds ([8 x i32]* @gDigest, i32 0, i32 0), i8* getelementptr inbounds ([192 x i8]* @gData, i32 0, i32 0), i32 %1) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = outerloop_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_d,
	arg_s,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__12_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] legup_memcpy_1_2_3;
reg [31:0] legup_memcpy_1_2_4;
reg  legup_memcpy_1_2_5;
reg  legup_memcpy_1_2_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_8;
reg [7:0] legup_memcpy_1_6_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_11_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memcpy_1_BB__0_1;
LEGUP_F_legup_memcpy_1_BB__0_1:
		next_state = LEGUP_F_legup_memcpy_1_BB__0_2;
LEGUP_F_legup_memcpy_1_BB__0_2:
		next_state = LEGUP_F_legup_memcpy_1_BB__0_3;
LEGUP_F_legup_memcpy_1_BB__0_3:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_4;
LEGUP_F_legup_memcpy_1_BB__12_14:
		next_state = LEGUP_0;
LEGUP_F_legup_memcpy_1_BB__2_4:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_5;
LEGUP_F_legup_memcpy_1_BB__2_5:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_6;
LEGUP_F_legup_memcpy_1_BB__2_6:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_7;
LEGUP_F_legup_memcpy_1_BB__2_7:
	if ((legup_memcpy_1_2_5_reg == 1'd1))
		next_state = LEGUP_F_legup_memcpy_1_BB__12_14;
	else if ((legup_memcpy_1_2_5_reg == 1'd0))
		next_state = LEGUP_F_legup_memcpy_1_BB__6_8;
LEGUP_F_legup_memcpy_1_BB__6_10:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_11;
LEGUP_F_legup_memcpy_1_BB__6_11:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_12;
LEGUP_F_legup_memcpy_1_BB__6_12:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_13;
LEGUP_F_legup_memcpy_1_BB__6_13:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_4;
LEGUP_F_legup_memcpy_1_BB__6_8:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_9;
LEGUP_F_legup_memcpy_1_BB__6_9:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
		legup_memcpy_1_2_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memcpy_1: %2*/
	/*   %4 = add i32 %3, -1*/
		legup_memcpy_1_2_4 = (legup_memcpy_1_2_3 + -32'd1);
end
always @(*) begin
	/* legup_memcpy_1: %2*/
	/*   %5 = icmp eq i32 %3, 0*/
		legup_memcpy_1_2_5 = (legup_memcpy_1_2_3 == 32'd0);
end
always @(posedge clk) begin
	/* legup_memcpy_1: %2*/
	/*   %5 = icmp eq i32 %3, 0*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		legup_memcpy_1_2_5_reg <= legup_memcpy_1_2_5;
		if (start == 1'b0 && ^(legup_memcpy_1_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
		legup_memcpy_1_6_7 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %8 = getelementptr inbounds i8* %7, i32 1*/
		legup_memcpy_1_6_8 = (legup_memcpy_1_6_7 + (1 * 32'd1));
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
		legup_memcpy_1_6_9 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
		legup_memcpy_1_6_10 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		legup_memcpy_1_6_10_reg <= legup_memcpy_1_6_10;
		if (start == 1'b0 && ^(legup_memcpy_1_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_6_10_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %11 = getelementptr inbounds i8* %10, i32 1*/
		legup_memcpy_1_6_11 = (legup_memcpy_1_6_10 + (1 * 32'd1));
end
always @(posedge clk) begin
	/* legup_memcpy_1: %6*/
	/*   %11 = getelementptr inbounds i8* %10, i32 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		legup_memcpy_1_6_11_reg <= legup_memcpy_1_6_11;
		if (start == 1'b0 && ^(legup_memcpy_1_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_6_11_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memcpy_1: %12*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__12_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_1_a;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_st_a;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_1_a;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_1_a;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_st_a;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_st_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_in_a = arg_n;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_in_a = arg_s;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_in_a = legup_memcpy_1_2_4;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_in_a = legup_memcpy_1_6_8;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memcpy_1_0_dt_a;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_address_b = `TAG_legup_memcpy_1_0_dt_a;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_address_b = legup_memcpy_1_6_7;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_address_b = `TAG_legup_memcpy_1_0_dt_a;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_address_b = legup_memcpy_1_6_10_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_in_b = arg_d;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_in_b = legup_memcpy_1_6_11_reg;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_in_b = legup_memcpy_1_6_9;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_size_b = 2'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_size_b = 2'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_main_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB__0_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB__4_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB__6_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB__6_8 = 4'd8;
parameter [3:0] LEGUP_F_main_BB__6_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB__9_10 = 4'd10;
parameter [3:0] LEGUP_F_main_BB__11_11 = 4'd11;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [3:0] LEGUP_function_call_2 = 4'd2;
parameter [3:0] LEGUP_function_call_4 = 4'd4;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_2_reg;
reg [31:0] main_4_5;
reg [31:0] main_4_5_reg;
reg  main_4_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep;
reg [31:0] main_6_7;
reg [31:0] main_9_10;
reg  legup_memcpy_1_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_arg_s;
reg [31:0] legup_memcpy_1_arg_n;
wire  legup_memcpy_1_memory_controller_enable_a;
wire  legup_memcpy_1_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_1_memory_controller_in_a;
wire [1:0] legup_memcpy_1_memory_controller_size_a;
wire  legup_memcpy_1_memory_controller_enable_b;
wire  legup_memcpy_1_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_1_memory_controller_in_b;
wire [1:0] legup_memcpy_1_memory_controller_size_b;
reg  legup_memcpy_1_finish_final;
reg  legup_memcpy_1_finish_reg;
wire  legup_memcpy_1_finish;
reg  SHA256_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] SHA256_arg_msg;
reg [63:0] SHA256_arg_msgLen;
wire  SHA256_memory_controller_enable_a;
wire  SHA256_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] SHA256_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] SHA256_memory_controller_in_a;
wire [1:0] SHA256_memory_controller_size_a;
wire  SHA256_memory_controller_enable_b;
wire  SHA256_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] SHA256_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] SHA256_memory_controller_in_b;
wire [1:0] SHA256_memory_controller_size_b;
reg  SHA256_finish_final;
reg  SHA256_finish_reg;
wire  SHA256_finish;


legup_memcpy_1 legup_memcpy_1 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_1_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_1_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_1_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_1_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_1_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_1_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_1_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_1_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_1_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_1_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_1_start),
	.finish (legup_memcpy_1_finish),
	.arg_d (legup_memcpy_1_arg_d),
	.arg_s (legup_memcpy_1_arg_s),
	.arg_n (legup_memcpy_1_arg_n)
);

defparam
	legup_memcpy_1.tag_offset = tag_offset;


SHA256 SHA256 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (SHA256_memory_controller_enable_a),
	.memory_controller_address_a (SHA256_memory_controller_address_a),
	.memory_controller_write_enable_a (SHA256_memory_controller_write_enable_a),
	.memory_controller_in_a (SHA256_memory_controller_in_a),
	.memory_controller_size_a (SHA256_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (SHA256_memory_controller_enable_b),
	.memory_controller_address_b (SHA256_memory_controller_address_b),
	.memory_controller_write_enable_b (SHA256_memory_controller_write_enable_b),
	.memory_controller_in_b (SHA256_memory_controller_in_b),
	.memory_controller_size_b (SHA256_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (SHA256_start),
	.finish (SHA256_finish),
	.arg_msg (SHA256_arg_msg),
	.arg_msgLen (SHA256_arg_msgLen)
);

defparam
	SHA256.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %0*/
	/*   %3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) #4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("\n");
	end
	/* main: %6*/
	/*   %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str3, i32 0, i32 0), i32 %7) #4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("%04x", $signed(main_6_7));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_6_7) === 1'bX) finish <= 0;
	end
	/* main: %11*/
	/*   %12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0)) #4*/
	if ((cur_state == LEGUP_F_main_BB__11_11)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_F_main_BB__11_11:
		next_state = LEGUP_0;
LEGUP_F_main_BB__4_6:
	if ((main_4_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__11_11;
	else if ((main_4_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__6_7;
LEGUP_F_main_BB__6_7:
		next_state = LEGUP_F_main_BB__6_8;
LEGUP_F_main_BB__6_8:
		next_state = LEGUP_F_main_BB__6_9;
LEGUP_F_main_BB__6_9:
		next_state = LEGUP_F_main_BB__9_10;
LEGUP_F_main_BB__9_10:
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_function_call_2:
	if ((legup_memcpy_1_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_function_call_4:
	if ((SHA256_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %0*/
	/*   %1 = getelementptr inbounds [3 x i8]* %msg, i32 0, i32 0*/
if (reset) begin main_0_1 = 0; end
		main_0_1 = `TAG_main_0_msg_a;
end
always @(*) begin
	/* main: %0*/
	/*   %2 = getelementptr inbounds [3 x i8]* %msg, i32 0, i32 0*/
if (reset) begin main_0_2 = 0; end
		main_0_2 = `TAG_main_0_msg_a;
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %2 = getelementptr inbounds [3 x i8]* %msg, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		main_0_2_reg <= main_0_2;
		if (start == 1'b0 && ^(main_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %5 = phi i32 [ 0, %0 ], [ %10, %9 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_5 = 32'd0;
	end
	/* main: %4*/
	/*   %5 = phi i32 [ 0, %0 ], [ %10, %9 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__9_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_4_5 = main_9_10;
	end
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %5 = phi i32 [ 0, %0 ], [ %10, %9 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_5_reg <= main_4_5;
		if (start == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
	end
	/* main: %4*/
	/*   %5 = phi i32 [ 0, %0 ], [ %10, %9 ]*/
	if (((cur_state == LEGUP_F_main_BB__9_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_5_reg <= main_4_5;
		if (start == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %exitcond = icmp eq i32 %5, 8*/
		main_4_exitcond = (main_4_5_reg == 32'd8);
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep = getelementptr [8 x i32]* @gDigest, i32 0, i32 %5*/
		main_6_scevgep = (`TAG_g_gDigest_a + (4 * main_4_5_reg));
end
always @(*) begin
	/* main: %6*/
	/*   %7 = load i32* %scevgep, align 4*/
		main_6_7 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %9*/
	/*   %10 = add nsw i32 %5, 1*/
		main_9_10 = (main_4_5_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memcpy_1_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memcpy_1_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memcpy_1_arg_d <= main_0_1;
		if (start == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memcpy_1_arg_s <= `TAG_g_mainmsg_a;
		if (start == 1'b0 && ^(`TAG_g_mainmsg_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		legup_memcpy_1_arg_n <= 32'd3;
		if (start == 1'b0 && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_1_finish_final = legup_memcpy_1_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_1))) begin
		legup_memcpy_1_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_finish_reg"); $finish; end
	end
	if (legup_memcpy_1_finish) begin
		legup_memcpy_1_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		SHA256_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to SHA256_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		SHA256_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to SHA256_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		SHA256_arg_msg <= main_0_2_reg;
		if (start == 1'b0 && ^(main_0_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to SHA256_arg_msg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		SHA256_arg_msgLen <= 64'd3;
		if (start == 1'b0 && ^(64'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to SHA256_arg_msgLen"); $finish; end
	end
end
always @(*) begin
	SHA256_finish_final = SHA256_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_3))) begin
		SHA256_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to SHA256_finish_reg"); $finish; end
	end
	if (SHA256_finish) begin
		SHA256_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to SHA256_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %11*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__11_11)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = SHA256_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = SHA256_memory_controller_enable_a;
	end
	/* main: %6*/
	/*   %7 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_7)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = SHA256_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = SHA256_memory_controller_address_a;
	end
	/* main: %6*/
	/*   %7 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_7)) begin
		memory_controller_address_a = main_6_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = SHA256_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = SHA256_memory_controller_write_enable_a;
	end
	/* main: %6*/
	/*   %7 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = SHA256_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = SHA256_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_1_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_1_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = SHA256_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = SHA256_memory_controller_size_a;
	end
	/* main: %6*/
	/*   %7 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_7)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = SHA256_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = SHA256_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = SHA256_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = SHA256_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = SHA256_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = SHA256_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = SHA256_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = SHA256_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_1_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([3 x i8]* @main.msg, i32 0, i32 0), i32 3)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_1_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = SHA256_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @SHA256(i8* %2, i64 3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = SHA256_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %11*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB__11_11)) begin
		return_val <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /opt/legup/legup-4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
